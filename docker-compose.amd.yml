version: "2.1"
volumes:
  resin-data: {}
  portainer_data: {}
services:
  prometheus:
    cpu_shares: 40
    build:
      dockerfile: amd64.dockerfile
      context: ./host-images/prometheus
    privileged: true
    pid: host
    restart: always
    ports:
      - 8080:8080
  manager:
    build:
      dockerfile: amd64.dockerfile
      context: ./host-images/manager
    privileged: true
    pid: host
    restart: always
    environment:
      - "NODE_ENV=production"
    volumes:
      - "./data:/data"
    ports:
      - 3000:3000
  trunk-recorder:
    cpu_shares: 1000
    build:
      dockerfile: amd64.dockerfile
      context: ./host-images/trunk-recorder
    privileged: true
    restart: unless-stopped
    depends_on:
      - "config"
    network_mode: host
    mem_swappiness: 10
    cap_add:
      - SYS_RAWIO
    volumes:
      - "./data:/data"
    environment:
      - RECORDER_CONF
  config:
    cpu_shares: 40
    build:
      dockerfile: amd64.dockerfile
      context: ./host-images/config
    network_mode: host
    restart: "on-failure"
    volumes:
      - "./data:/data"
  mqtt:
    image: panuwitp/mosquitto-arm
    ports:
      - "1883:1883"
  node-red:
    build:
      dockerfile: amd64.dockerfile
      context: ./host-images/node-red
    volumes:
      - "./data:/data"
    ports:
      - "1880:1880"
    depends_on:
      - mqtt
    restart: always
  nginx:
    cpu_shares: 40
    build:
      dockerfile: amd64.dockerfile
      context: ./host-images/nginx
    privileged: true
    depends_on:
      - manager
      - prometheus
    ports:
      - "80:80"
      - "443:443"
    restart: always
  debugger:
    cpu_shares: 40
    build:
      dockerfile: amd64.dockerfile
      context: ./host-images/debugger
    command: "exit 0"
    restart: "no"
    privileged: true
    volumes:
      - "./data:/data"
  portainer:
    image: portainer/portainer
    volumes:
      - "portainer_data:/data"
      - "/var/run/docker.sock:/var/run/docker.sock"
    ports:
      - "9000:9000"
