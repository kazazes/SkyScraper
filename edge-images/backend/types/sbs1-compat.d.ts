/** Declaration file generated by dts-gen */

export class Client {
    constructor(options: any);

    emitError(err: any): void;

    parseMessage_(line: any): void;

}

export class SBS1Message {
    constructor(parts: any);

    generated_timestamp(): any;

    logged_timestamp(): any;

    stringify(): any;

}

export const MessageType: {
    CLICK: string;
    NEW_AIRCRAFT: string;
    NEW_ID: string;
    SELECTION_CHANGE: string;
    STATUS_CHANGE: string;
    TRANSMISSION: string;
};

export const TransmissionType: {
    AIR_TO_AIR: number;
    ALL_CALL_REPLY: number;
    ES_AIRBORNE_POS: number;
    ES_AIRBORNE_VEL: number;
    ES_IDENT_AND_CATEGORY: number;
    ES_SURFACE_POS: number;
    SURVEILLANCE_ALT: number;
    SURVEILLANCE_ID: number;
};

export function createClient(options: any): any;

export function parseSbs1Message(s: any): any;

export function stringify(m: any): any;

export namespace Client {
        function addListener(type: any, listener: any): any;

        function emit(type: any, args: any): any;

        function emitError(err: any): void;

        function eventNames(): any;

        function getMaxListeners(): any;

        function listenerCount(type: any): any;

        function listeners(type: any): any;

        function off(type: any, listener: any): any;

        function on(type: any, listener: any): any;

        function once(type: any, listener: any): any;

        function parseMessage_(line: any): void;

        function prependListener(type: any, listener: any): any;

        function prependOnceListener(type: any, listener: any): any;

        function rawListeners(type: any): any;

        function removeAllListeners(type: any, ...args: any[]): any;

        function removeListener(type: any, listener: any): any;

        function setMaxListeners(n: any): any;

        namespace addListener {
            const prototype: {
            };

        }

        namespace emit {
            const prototype: {
            };

        }

        namespace emitError {
            const prototype: {
            };

        }

        namespace eventNames {
            const prototype: {
            };

        }

        namespace getMaxListeners {
            const prototype: {
            };

        }

        namespace listenerCount {
            const prototype: {
            };

        }

        namespace listeners {
            const prototype: {
            };

        }

        namespace off {
            const prototype: {
            };

        }

        namespace on {
            const prototype: {
            };

        }

        namespace once {
            const prototype: {
            };

        }

        namespace parseMessage_ {
            const prototype: {
            };

        }

        namespace prependListener {
            const prototype: {
            };

        }

        namespace prependOnceListener {
            const prototype: {
            };

        }

        namespace rawListeners {
            const prototype: {
            };

        }

        namespace removeAllListeners {
            const prototype: {
            };

        }

        namespace removeListener {
            const prototype: {
            };

        }

        namespace setMaxListeners {
            const prototype: {
            };

        }



}

export namespace SBS1Message {
        function generated_timestamp(): any;

        function logged_timestamp(): any;

        function stringify(): any;

        namespace generated_timestamp {
            const prototype: {
            };

        }

        namespace logged_timestamp {
            const prototype: {
            };

        }

        namespace stringify {
            const prototype: {
            };

        }


}

export namespace createClient {

}

export namespace parseSbs1Message {


}

export namespace stringify {

}

