/** Declaration file generated by dts-gen */

declare module 'apify' {
  import * as Apify from 'apify';
  import { Page } from 'puppeteer';

  export class AutoscaledPool {
    constructor(...args: any[]);

    abort(...args: any[]): void;

    pause(...args: any[]): void;

    resume(...args: any[]): void;

    run(...args: any[]): void;

    setMaxConcurrency(...args: any[]): void;

    setMinConcurrency(...args: any[]): void;
  }

  export class BasicCrawler {
    constructor(...args: any[]);

    run(...args: any[]): void;
  }

  export class CheerioCrawler {
    constructor(...args: any[]);

    run(...args: any[]): void;
  }

  export class LiveViewServer {
    constructor(...args: any[]);

    hasClients(...args: any[]): void;

    isRunning(...args: any[]): void;

    serve(...args: any[]): void;

    start(...args: any[]): void;

    stop(...args: any[]): void;
  }

  export class PseudoUrl {
    constructor(...args: any[]);

    createRequest(...args: any[]): void;

    matches(...args: any[]): void;
  }

  export class PuppeteerCrawler {
    constructor(args: {
      requestQueue: any;
      handlePageFunction: ({
        request,
        page,
      }: {
        request: Request;
        page: any;
      }) => any;
      minConcurrency?: number;
      maxRequestsPerCrawl?: number;
      maxConcurrency?: number;
      puppeteerPoolOptions?: {
        useLiveView?: boolean;
        slowMo?: number;
      };
      autoscaledPoolOptions?: any;
      launchPuppeteerOptions?: any;
    });

    run(...args: any[]): void;
  }

  export class PuppeteerPool {
    constructor(...args: any[]);

    destroy(...args: any[]): void;

    newPage(...args: any[]): void;

    recyclePage(...args: any[]): void;

    retire(...args: any[]): void;

    serveLiveViewSnapshot(...args: any[]): void;
  }

  export class Request {
    constructor(...args: any[]);

    doNotRetry(...args: any[]): void;

    pushErrorMessage(...args: any[]): void;

    url: string;

    loadedUrl: string;

    userData: any;
  }

  export class RequestList {
    constructor(...args: any[]);

    fetchNextRequest(...args: any[]): void;

    getState(...args: any[]): void;

    handledCount(...args: any[]): void;

    initialize(...args: any[]): void;

    isEmpty(...args: any[]): void;

    isFinished(...args: any[]): void;

    length(...args: any[]): void;

    markRequestHandled(...args: any[]): void;

    persistState(...args: any[]): void;

    reclaimRequest(...args: any[]): void;

    addRequest(args: any): void;

    getInfo(): any;
  }

  export type RequestQueue = RequestList;

  export class SettingsRotator {
    constructor(...args: any[]);

    fetchSettings(...args: any[]): void;

    reclaimSettings(...args: any[]): void;
  }

  export function addWebhook({
    eventTypes,
    requestUrl,
    payloadTemplate,
    idempotencyKey,
  }: any): any;

  export function call(actId: any, input: any, options: any): any;

  export function callTask(taskId: any, input: any, options: any): any;

  export function getApifyProxyUrl(options: any): any;

  export function getEnv(): any;

  export function getInput(): Promise<any>;

  export function getMemoryInfo(): any;

  export function getValue(key: any): any;

  export function initializeEvents(): void;

  export function isAtHome(): void;

  export function launchPuppeteer(options: any): any;

  export function main(userFunc: any): void;

  export function metamorph(targetActorId: any, input: any, options: any): void;

  export function openDataset(datasetIdOrName: any, options: any): any;

  export function openKeyValueStore(storeIdOrName: any, options?: any): any;

  export function openRequestList(
    listName: any,
    sources: any,
    options?: any
  ): any;

  export function openRequestQueue(
    queueIdOrName?: any,
    options?: any
  ): RequestQueue;

  export function pushData(item: any): void;

  export function setValue(key: any, value: any, options: any): any;

  export function stopEvents(): void;

  export namespace client {
    const stats: {
      calls: number;
      rateLimitErrors: number[];
      requests: number;
    };

    function getDefaultOptions(): void;

    function getOptions(): any;

    function setOptions(newOptions: any): void;

    namespace acts {
      function abortBuild(callOpts: any, callback: any): any;

      function abortRun(callOpts: any, callback: any): any;

      function buildAct(callOpts: any, callback: any): any;

      function createAct(callOpts: any, callback: any): any;

      function createActVersion(callOpts: any, callback: any): any;

      function deleteAct(callOpts: any, callback: any): any;

      function deleteActVersion(callOpts: any, callback: any): any;

      function getAct(callOpts: any, callback: any): any;

      function getActVersion(callOpts: any, callback: any): any;

      function getBuild(callOpts: any, callback: any): any;

      function getRun(callOpts: any, callback: any): any;

      function listActVersions(callOpts: any, callback: any): any;

      function listActs(callOpts: any, callback: any): any;

      function listBuilds(callOpts: any, callback: any): any;

      function listRuns(callOpts: any, callback: any): any;

      function listWebhooks(callOpts: any, callback: any): any;

      function metamorphRun(callOpts: any, callback: any): any;

      function runAct(callOpts: any, callback: any): any;

      function updateAct(callOpts: any, callback: any): any;

      function updateActVersion(callOpts: any, callback: any): any;
    }

    namespace crawlers {
      function createCrawler(callOpts: any, callback: any): any;

      function deleteCrawler(callOpts: any, callback: any): any;

      function getCrawlerSettings(callOpts: any, callback: any): any;

      function getExecutionDetails(callOpts: any, callback: any): any;

      function getExecutionResults(callOpts: any, callback: any): any;

      function getLastExecution(callOpts: any, callback: any): any;

      function getLastExecutionResults(callOpts: any, callback: any): any;

      function getListOfExecutions(callOpts: any, callback: any): any;

      function listCrawlers(callOpts: any, callback: any): any;

      function startExecution(callOpts: any, callback: any): any;

      function stopExecution(callOpts: any, callback: any): any;

      function updateCrawler(callOpts: any, callback: any): any;
    }

    namespace datasets {
      function deleteDataset(callOpts: any, callback: any): any;

      function getDataset(callOpts: any, callback: any): any;

      function getItems(callOpts: any, callback: any): any;

      function getOrCreateDataset(callOpts: any, callback: any): any;

      function listDatasets(callOpts: any, callback: any): any;

      function putItems(callOpts: any, callback: any): any;
    }

    namespace keyValueStores {
      function deleteRecord(callOpts: any, callback: any): any;

      function deleteStore(callOpts: any, callback: any): any;

      function getOrCreateStore(callOpts: any, callback: any): any;

      function getRecord(callOpts: any, callback: any): any;

      function getStore(callOpts: any, callback: any): any;

      function listKeys(callOpts: any, callback: any): any;

      function listStores(callOpts: any, callback: any): any;

      function putRecord(callOpts: any, callback: any): any;
    }

    namespace logs {
      function getLog(callOpts: any, callback: any): any;
    }

    namespace requestQueues {
      function addRequest(callOpts: any, callback: any): any;

      function deleteQueue(callOpts: any, callback: any): any;

      function deleteRequest(callOpts: any, callback: any): any;

      function getHead(callOpts: any, callback: any): any;

      function getOrCreateQueue(callOpts: any, callback: any): any;

      function getQueue(callOpts: any, callback: any): any;

      function getRequest(callOpts: any, callback: any): any;

      function listQueues(callOpts: any, callback: any): any;

      function updateRequest(callOpts: any, callback: any): any;
    }

    namespace tasks {
      function createTask(callOpts: any, callback: any): any;

      function deleteTask(callOpts: any, callback: any): any;

      function getInput(callOpts: any, callback: any): any;

      function getTask(callOpts: any, callback: any): any;

      function listRuns(callOpts: any, callback: any): any;

      function listTasks(callOpts: any, callback: any): any;

      function listWebhooks(callOpts: any, callback: any): any;

      function runTask(callOpts: any, callback: any): any;

      function updateInput(callOpts: any, callback: any): any;

      function updateTask(callOpts: any, callback: any): any;
    }

    namespace users {
      function getUser(callOpts: any, callback: any): any;
    }

    namespace webhookDispatches {
      function getDispatch(callOpts: any, callback: any): any;

      function listDispatches(callOpts: any, callback: any): any;
    }

    namespace webhooks {
      function createWebhook(callOpts: any, callback: any): any;

      function deleteWebhook(callOpts: any, callback: any): any;

      function getWebhook(callOpts: any, callback: any): any;

      function listDispatches(callOpts: any, callback: any): any;

      function listWebhooks(callOpts: any, callback: any): any;

      function updateWebhook(callOpts: any, callback: any): any;
    }
  }

  export namespace events {
    function addListener(type: any, listener: any): any;

    function emit(type: any, args: any): any;

    function eventNames(): any;

    function getMaxListeners(): any;

    function listenerCount(type: any): any;

    function listeners(type: any): any;

    function off(type: any, listener: any): any;

    function on(type: any, listener: any): any;

    function once(type: any, listener: any): any;

    function prependListener(type: any, listener: any): any;

    function prependOnceListener(type: any, listener: any): any;

    function rawListeners(type: any): any;

    function removeAllListeners(type: any, ...args: any[]): any;

    function removeListener(type: any, listener: any): any;

    function setMaxListeners(n: any): any;
  }

  export namespace utils {
    function enqueueLinksByClickingElements(args: any): any;
    const URL_NO_COMMAS_REGEX: RegExp;

    const URL_WITH_COMMAS_REGEX: RegExp;

    function createRequestDebugInfo(
      request: any,
      response: any,
      additionalFields: any
    ): any;

    function downloadListOfUrls({ url, encoding, urlRegExp }: any): any;

    function enqueueLinks(options: any): any;

    function extractUrls({ string, urlRegExp }: any): any;

    function getRandomUserAgent(): any;

    function htmlToText(html: any): any;

    function isDocker(forceReset: any): any;

    function requestAsBrowser(options: any): any;

    function sleep(millis: any): any;

    namespace log {
      const LEVELS: {
        DEBUG: number;
        ERROR: number;
        INFO: number;
        OFF: number;
        PERF: number;
        SOFT_FAIL: number;
        WARNING: number;
      };

      const isDebugMode: boolean;

      const logJson: boolean;

      const skipLevelInfo: boolean;

      const skipTimeInDev: boolean;

      function debug(message: any, data?: any): void;

      function deprecated(message: any): void;

      function error(message: any, data?: any): void;

      function exception(exception: any, message: any, data: any): void;

      function getLevel(): void;

      function info(message: any, data?: any): void;

      function internal(
        message: any,
        data: any,
        level: any,
        exception: any
      ): void;

      function methodCall(self: any, methodName: any, args: any): void;

      function methodException(
        exception: any,
        self: any,
        methodName: any,
        args: any
      ): void;

      function perf(message: any, data: any): void;

      function prepareInternalJsonLogLine(
        message: any,
        data: any,
        level: any,
        exception: any
      ): any;

      function prepareInternalLogLine(
        message: any,
        data: any,
        level: any,
        exception: any
      ): any;

      function prepareInternalPlainLogLine(
        message: any,
        data: any,
        level: any,
        exception: any
      ): any;

      function setLevel(level: any): void;

      function softFail(message: any, data: any): void;

      function warning(message: any, data?: any): void;
    }

    namespace puppeteer {
      function addInterceptRequestHandler(page: any, handler: any): void;

      function blockRequests(page: any, options: any): void;

      function blockResources(page: any, resourceTypes: any): void;

      function cacheResponses(
        page: any,
        cache: any,
        responseUrlRules: any
      ): any;

      function compileScript(scriptString: any, context: any): any;

      function enqueueLinks(args: {
        page: Page;
        selector: string;
        pseudoUrls: PseudoUrl[] | string[];
        requestQueue: RequestList;
        transformRequestFunction: any;
      }): any;

      function enqueueLinksByClickingElements(options: any): any;

      function enqueueRequestsFromClickableElements(
        page: any,
        selector: any,
        purls: any,
        requestQueue: any,
        requestOpts: any
      ): any;

      function gotoExtended(page: any, request: any, gotoOptions: any): any;

      function hideWebDriver(page: any): any;

      function infiniteScroll(page: any, options: any): void;

      function injectFile(page: any, filePath: any, options: any): any;

      function injectJQuery(page: any): any;

      function injectUnderscore(page: any): any;

      function removeInterceptRequestHandler(page: any, handler: any): void;
    }

    namespace social {
      const EMAIL_REGEX: RegExp;

      const EMAIL_REGEX_GLOBAL: RegExp;

      const FACEBOOK_REGEX: RegExp;

      const FACEBOOK_REGEX_GLOBAL: RegExp;

      const INSTAGRAM_REGEX: RegExp;

      const INSTAGRAM_REGEX_GLOBAL: RegExp;

      const LINKEDIN_REGEX: RegExp;

      const LINKEDIN_REGEX_GLOBAL: RegExp;

      const TWITTER_REGEX: RegExp;

      const TWITTER_REGEX_GLOBAL: RegExp;

      function emailsFromText(text: any): any;

      function emailsFromUrls(urls: any): any;

      function parseHandlesFromHtml(html: any, data: any): any;

      function phonesFromText(text: any): any;

      function phonesFromUrls(urls: any): any;
    }
  }
}
