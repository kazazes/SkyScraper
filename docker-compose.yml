version: "2"
volumes:
  resin-data: {}
services:
  prisma-migrate:
    build:
      context: edge-images/prisma-migrate
      dockerfile: Dockerfile
    depends_on:
      - prisma
      - postgres
    environment:
      - PRISMA_MANAGEMENT_API_SECRET=scrapingskies
      - PRISMA_ENDPOINT=http://prisma:4466
  prisma:
    image: prismagraphql/prisma:1.34
    restart: always
    ports:
      - '4466:4466'
    environment:
      PRISMA_CONFIG: |
        managementApiSecret: scrapingskies
        port: 4466
        databases:
          default:
            connector: postgres
            host: postgres
            port: 5432
            user: prisma
            password: prisma
    depends_on:
      - postgres
  postgres:
    image: postgres:10.3
    restart: always
    environment:
      POSTGRES_USER: prisma
      POSTGRES_PASSWORD: prisma
      PGDATA: /data/postgres/pgdata
    volumes:
      - "resin-data:/data"
  jupyter:
    restart: always
    build:
      dockerfile: Dockerfile
      context: edge-images/jupyter
    environment:
      - CHOWN_HOME=yes
      - GRANT_SUDO=yes
      - JUPYTER_ENABLE_LAB=yes
      - PYTHONPATH=/usr/lib/python3/dist-packages
    user: root
    privileged: true
    ports:
      - "8888:8888"
    volumes:
      - "resin-data:/data"
    command: "start-notebook.sh \
      --NotebookApp.base_url=/jupyter \
      --NotebookApp.password=sha1:301690a52fdc:225879e4ae5ef0a2a0d85fc2b93bc648949dd113"
  wifi:
    privileged: true
    pid: host
    network_mode: host
    labels:
      io.balena.features.dbus: "1"
    build:
      dockerfile: Dockerfile
      context: edge-images/wifi-connect
    environment:
      - PORTAL_PASSPHRASE=$$craping$$kies
      - PORTAL_SSID=SkyScraper
      - PORTAL_LISTENING_PORT=8081
  mqtt:
    build:
      dockerfile: Dockerfile
      context: edge-images/mqtt
    user: root
    ports:
      - "1883:1883"
    volumes:
      - "resin-data:/data"
  config:
    build:
      dockerfile: Dockerfile
      context: edge-images/config
    restart: "on-failure"
    volumes:
      - "resin-data:/data"
  backend:
    build:
      dockerfile: Dockerfile
      context: edge-images/backend
    volumes:
      - "resin-data:/data"
    ports:
      - "4000:4000"
    environment:
      - ENABLE_UPLOAD=0
      - GCP_PROJECT_ID=methodical-tea-237508
      - GCP_REGION=us-central1
      - GOOGLE_APPLICATION_CREDENTIALS=/data/certs/gcp.json
      - GRAPHQL_PORT=4000
      - MQTT_HOST=mqtt
      - MQTT_PASSWORD=Ur6yANnx@ZD
      - MQTT_PORT=1883
      - MQTT_USERNAME=edge
      - PRISMA_ENDPOINT=http://prisma:4466
      - PRISMA_SECRET=scrapingskies
      - SENTRY_URI=https://4ac277bd085b4acbbaa74de8c33202b2@sentry.io/1441821
      - REDIS_HOST=redis
      - ENABLE_TRANSCRIPTION=1
    depends_on:
      - redis
      - mqtt
  netdata:
    image: skyscraperai/netdata
    hostname: $EDGE_HOSTNAME
    ports:
      - 19999:19999
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    privileged: true
    restart: always
    labels:
      io.balena.features.dbus: true
      io.balena.features.balena-socket: true
    environment:
      - DBUS_SYSTEM_BUS_ADDRESS=unix:path=/host/run/dbus/system_bus_socket
  nginx:
    build:
      dockerfile: Dockerfile
      context: edge-images/nginx
    depends_on:
      - frontend
      - nodered
      - netdata
      - backend
      - jupyter
    ports:
      - "8080:8080"
      - "443:443"
    restart: always
    volumes:
      - "resin-data:/data"
  nodered:
    build:
      dockerfile: Dockerfile
      context: edge-images/node-red
    volumes:
      - "resin-data:/data"
    ports:
      - "1880:1880"
    environment:
      - NODE_ENV=production
    restart: always
  ngrok:
    build:
      dockerfile: Dockerfile
      context: edge-images/ngrok
    privileged: false
    depends_on:
      - nginx
    environment:
      - NGROK_AUTH=iiX4RYrrdFWgU9pdDEnR_4qRcocGF5v9E3SjGmys7L
      - NGROK_REGION=us
      - NGROK_PORT=nginx:443
  frontend:
    build:
      dockerfile: Dockerfile
      context: edge-images/frontend
    volumes:
      - "resin-data:/data"
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NETDATA_HTTP=https://$EDGE_HOSTNAME/netdata/
      - GRAPHQL_HTTP=https://$EDGE_HOSTNAME/graphql/
      - GRAPHQL_WS=wss://$EDGE_HOSTNAME/graphql/
    restart: always
  redis:
    build:
      dockerfile: Dockerfile
      context: edge-images/redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    restart: always
    privileged: true
  trunk-recorder:
    build:
      dockerfile: Dockerfile
      context: edge-images/trunk-recorder
    privileged: true
    volumes:
      - "resin-data:/data"
    environment:
      - RECORDER_CONF=sites/SF-PK/config.json
      - SHORTNAME=SFPD
      - MQTT_PASSWORD=1
      - MQTT_PORT=1883
      - MQTT_USERNAME=edge
      - MQTT_HOST=mqtt
    restart: always
  datadog:
    build:
      dockerfile: Dockerfile
      context: edge-images/datadog
    privileged: true
    restart: always
    pid: "host"
    environment:
      - DATADOG_API_KEY=721a8a6024c81a2cefaa08e2e2ef4fb4
      - DBUS_SYSTEM_BUS_ADDRESS=unix:path=/host/run/dbus/system_bus_socket
    labels:
      io.balena.features.dbus: "1"
      io.balena.features.balena-socket: "1"
    volumes:
      - "resin-data:/data"
  # kiosk:
  #   restart: always
  #   build:
  #     dockerfile: Dockerfile
  #     context: edge-images/chromium-kiosk
  #   labels:
  #     io.balena.features.dbus: "1"
  #   environment:
  #     - KIOSK_URL=http://nginx/
  #   privileged: true
  # sdr-watchdog:
  # restart: always
  # build:
  #   dockerfile: Dockerfile
  #   context: edge-images/sdr-watchdog
  # privileged: true
  # environment:
  #   - MQTT_HOST=mqtt
  #   - MQTT_PORT=1883
