// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import {
  TrunkRecorderConfig,
  TrunkRecorderSource,
  TrunkRecorderSystem,
  TrunkRecorderConfigConnection,
  PageInfo,
  TrunkRecorderConfigEdge,
  AggregateTrunkRecorderConfig,
  TrunkRecorderSourceConnection,
  TrunkRecorderSourceEdge,
  AggregateTrunkRecorderSource,
  TrunkRecorderSystemConnection,
  TrunkRecorderSystemEdge,
  AggregateTrunkRecorderSystem,
  BatchPayload,
  TrunkRecorderConfigSubscriptionPayload,
  TrunkRecorderConfigPreviousValues,
  TrunkRecorderSourceSubscriptionPayload,
  TrunkRecorderSourcePreviousValues,
  TrunkRecorderSystemSubscriptionPayload,
  TrunkRecorderSystemPreviousValues
} from ".";
import { Context } from "../../packages/backend/server/types";

export type TrunkedModulation = "QPSK" | "FSK4";
export type TrunkedSystemType =
  | "SMARTNET"
  | "P25"
  | "CONVENTIONAL"
  | "CONVENTIONAL_P25";
export type SmartnetBandplan =
  | "STANDARD_800"
  | "REBAND_800"
  | "SPLINTER_800"
  | "CUSTOM_400";
export type TalkgroupDisplayFormat = "ID" | "ID_TAG" | "TAG_ID";
export type TrunkRecorderDefaultMode = "ANALOG" | "DIGITAL";
export type TrunkRecorderFrequencyFormat = "EXP" | "MHZ" | "HZ";
export type TrunkRecorderConfigOrderByInput =
  | "defaultMode_ASC"
  | "defaultMode_DESC"
  | "captureDir_ASC"
  | "captureDir_DESC"
  | "callTimeout_ASC"
  | "callTimeout_DESC"
  | "logFile_ASC"
  | "logFile_DESC"
  | "frequencyFormat_ASC"
  | "frequencyFormat_DESC"
  | "controlWarnRate_ASC"
  | "controlWarnRate_DESC"
  | "statusAsString_ASC"
  | "statusAsString_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";
export type TrunkRecorderSourceOrderByInput =
  | "center_ASC"
  | "center_DESC"
  | "rate_ASC"
  | "rate_DESC"
  | "squelch_ASC"
  | "squelch_DESC"
  | "error_ASC"
  | "error_DESC"
  | "gain_ASC"
  | "gain_DESC"
  | "digitalRecorders_ASC"
  | "digitalRecorders_DESC"
  | "digitalLevels_ASC"
  | "digitalLevels_DESC"
  | "analogRecorders_ASC"
  | "analogRecorders_DESC"
  | "analogLevels_ASC"
  | "analogLevels_DESC"
  | "device_ASC"
  | "device_DESC"
  | "modulation_ASC"
  | "modulation_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";
export type TrunkRecorderSystemOrderByInput =
  | "type_ASC"
  | "type_DESC"
  | "talkgroupsFile_ASC"
  | "talkgroupsFile_DESC"
  | "recordUnknown_ASC"
  | "recordUnknown_DESC"
  | "shortName_ASC"
  | "shortName_DESC"
  | "uploadScript_ASC"
  | "uploadScript_DESC"
  | "audioArchive_ASC"
  | "audioArchive_DESC"
  | "callLog_ASC"
  | "callLog_DESC"
  | "bandplan_ASC"
  | "bandplan_DESC"
  | "bandplanBase_ASC"
  | "bandplanBase_DESC"
  | "bandplanHigh_ASC"
  | "bandplanHigh_DESC"
  | "bandplanSpacing_ASC"
  | "bandplanSpacing_DESC"
  | "bandplanOffset_ASC"
  | "bandplanOffset_DESC"
  | "talkgroupDisplayFormat_ASC"
  | "talkgroupDisplayFormat_DESC"
  | "delayCreateOutput_ASC"
  | "delayCreateOutput_DESC"
  | "hideEncrypted_ASC"
  | "hideEncrypted_DESC"
  | "hideUnknownTalkgroups_ASC"
  | "hideUnknownTalkgroups_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";
export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface TrunkRecorderConfigWhereInput {
    sources_every?: TrunkRecorderSourceWhereInput | null;
    sources_some?: TrunkRecorderSourceWhereInput | null;
    sources_none?: TrunkRecorderSourceWhereInput | null;
    systems_every?: TrunkRecorderSystemWhereInput | null;
    systems_some?: TrunkRecorderSystemWhereInput | null;
    systems_none?: TrunkRecorderSystemWhereInput | null;
    defaultMode?: TrunkRecorderDefaultMode | null;
    defaultMode_not?: TrunkRecorderDefaultMode | null;
    defaultMode_in?: TrunkRecorderDefaultMode[] | null;
    defaultMode_not_in?: TrunkRecorderDefaultMode[] | null;
    captureDir?: string | null;
    captureDir_not?: string | null;
    captureDir_in?: string[] | null;
    captureDir_not_in?: string[] | null;
    captureDir_lt?: string | null;
    captureDir_lte?: string | null;
    captureDir_gt?: string | null;
    captureDir_gte?: string | null;
    captureDir_contains?: string | null;
    captureDir_not_contains?: string | null;
    captureDir_starts_with?: string | null;
    captureDir_not_starts_with?: string | null;
    captureDir_ends_with?: string | null;
    captureDir_not_ends_with?: string | null;
    callTimeout?: number | null;
    callTimeout_not?: number | null;
    callTimeout_in?: number[] | null;
    callTimeout_not_in?: number[] | null;
    callTimeout_lt?: number | null;
    callTimeout_lte?: number | null;
    callTimeout_gt?: number | null;
    callTimeout_gte?: number | null;
    logFile?: boolean | null;
    logFile_not?: boolean | null;
    frequencyFormat?: TrunkRecorderFrequencyFormat | null;
    frequencyFormat_not?: TrunkRecorderFrequencyFormat | null;
    frequencyFormat_in?: TrunkRecorderFrequencyFormat[] | null;
    frequencyFormat_not_in?: TrunkRecorderFrequencyFormat[] | null;
    controlWarnRate?: number | null;
    controlWarnRate_not?: number | null;
    controlWarnRate_in?: number[] | null;
    controlWarnRate_not_in?: number[] | null;
    controlWarnRate_lt?: number | null;
    controlWarnRate_lte?: number | null;
    controlWarnRate_gt?: number | null;
    controlWarnRate_gte?: number | null;
    statusAsString?: boolean | null;
    statusAsString_not?: boolean | null;
    AND?: TrunkRecorderConfigWhereInput[] | null;
    OR?: TrunkRecorderConfigWhereInput[] | null;
    NOT?: TrunkRecorderConfigWhereInput[] | null;
  }
  export interface TrunkRecorderSourceWhereInput {
    center?: number | null;
    center_not?: number | null;
    center_in?: number[] | null;
    center_not_in?: number[] | null;
    center_lt?: number | null;
    center_lte?: number | null;
    center_gt?: number | null;
    center_gte?: number | null;
    rate?: number | null;
    rate_not?: number | null;
    rate_in?: number[] | null;
    rate_not_in?: number[] | null;
    rate_lt?: number | null;
    rate_lte?: number | null;
    rate_gt?: number | null;
    rate_gte?: number | null;
    squelch?: number | null;
    squelch_not?: number | null;
    squelch_in?: number[] | null;
    squelch_not_in?: number[] | null;
    squelch_lt?: number | null;
    squelch_lte?: number | null;
    squelch_gt?: number | null;
    squelch_gte?: number | null;
    error?: number | null;
    error_not?: number | null;
    error_in?: number[] | null;
    error_not_in?: number[] | null;
    error_lt?: number | null;
    error_lte?: number | null;
    error_gt?: number | null;
    error_gte?: number | null;
    gain?: number | null;
    gain_not?: number | null;
    gain_in?: number[] | null;
    gain_not_in?: number[] | null;
    gain_lt?: number | null;
    gain_lte?: number | null;
    gain_gt?: number | null;
    gain_gte?: number | null;
    digitalRecorders?: number | null;
    digitalRecorders_not?: number | null;
    digitalRecorders_in?: number[] | null;
    digitalRecorders_not_in?: number[] | null;
    digitalRecorders_lt?: number | null;
    digitalRecorders_lte?: number | null;
    digitalRecorders_gt?: number | null;
    digitalRecorders_gte?: number | null;
    digitalLevels?: number | null;
    digitalLevels_not?: number | null;
    digitalLevels_in?: number[] | null;
    digitalLevels_not_in?: number[] | null;
    digitalLevels_lt?: number | null;
    digitalLevels_lte?: number | null;
    digitalLevels_gt?: number | null;
    digitalLevels_gte?: number | null;
    analogRecorders?: number | null;
    analogRecorders_not?: number | null;
    analogRecorders_in?: number[] | null;
    analogRecorders_not_in?: number[] | null;
    analogRecorders_lt?: number | null;
    analogRecorders_lte?: number | null;
    analogRecorders_gt?: number | null;
    analogRecorders_gte?: number | null;
    analogLevels?: number | null;
    analogLevels_not?: number | null;
    analogLevels_in?: number[] | null;
    analogLevels_not_in?: number[] | null;
    analogLevels_lt?: number | null;
    analogLevels_lte?: number | null;
    analogLevels_gt?: number | null;
    analogLevels_gte?: number | null;
    device?: string | null;
    device_not?: string | null;
    device_in?: string[] | null;
    device_not_in?: string[] | null;
    device_lt?: string | null;
    device_lte?: string | null;
    device_gt?: string | null;
    device_gte?: string | null;
    device_contains?: string | null;
    device_not_contains?: string | null;
    device_starts_with?: string | null;
    device_not_starts_with?: string | null;
    device_ends_with?: string | null;
    device_not_ends_with?: string | null;
    modulation?: TrunkedModulation | null;
    modulation_not?: TrunkedModulation | null;
    modulation_in?: TrunkedModulation[] | null;
    modulation_not_in?: TrunkedModulation[] | null;
    AND?: TrunkRecorderSourceWhereInput[] | null;
    OR?: TrunkRecorderSourceWhereInput[] | null;
    NOT?: TrunkRecorderSourceWhereInput[] | null;
  }
  export interface TrunkRecorderSystemWhereInput {
    type?: TrunkedSystemType | null;
    type_not?: TrunkedSystemType | null;
    type_in?: TrunkedSystemType[] | null;
    type_not_in?: TrunkedSystemType[] | null;
    talkgroupsFile?: string | null;
    talkgroupsFile_not?: string | null;
    talkgroupsFile_in?: string[] | null;
    talkgroupsFile_not_in?: string[] | null;
    talkgroupsFile_lt?: string | null;
    talkgroupsFile_lte?: string | null;
    talkgroupsFile_gt?: string | null;
    talkgroupsFile_gte?: string | null;
    talkgroupsFile_contains?: string | null;
    talkgroupsFile_not_contains?: string | null;
    talkgroupsFile_starts_with?: string | null;
    talkgroupsFile_not_starts_with?: string | null;
    talkgroupsFile_ends_with?: string | null;
    talkgroupsFile_not_ends_with?: string | null;
    recordUnknown?: boolean | null;
    recordUnknown_not?: boolean | null;
    shortName?: string | null;
    shortName_not?: string | null;
    shortName_in?: string[] | null;
    shortName_not_in?: string[] | null;
    shortName_lt?: string | null;
    shortName_lte?: string | null;
    shortName_gt?: string | null;
    shortName_gte?: string | null;
    shortName_contains?: string | null;
    shortName_not_contains?: string | null;
    shortName_starts_with?: string | null;
    shortName_not_starts_with?: string | null;
    shortName_ends_with?: string | null;
    shortName_not_ends_with?: string | null;
    uploadScript?: string | null;
    uploadScript_not?: string | null;
    uploadScript_in?: string[] | null;
    uploadScript_not_in?: string[] | null;
    uploadScript_lt?: string | null;
    uploadScript_lte?: string | null;
    uploadScript_gt?: string | null;
    uploadScript_gte?: string | null;
    uploadScript_contains?: string | null;
    uploadScript_not_contains?: string | null;
    uploadScript_starts_with?: string | null;
    uploadScript_not_starts_with?: string | null;
    uploadScript_ends_with?: string | null;
    uploadScript_not_ends_with?: string | null;
    audioArchive?: boolean | null;
    audioArchive_not?: boolean | null;
    callLog?: boolean | null;
    callLog_not?: boolean | null;
    bandplan?: SmartnetBandplan | null;
    bandplan_not?: SmartnetBandplan | null;
    bandplan_in?: SmartnetBandplan[] | null;
    bandplan_not_in?: SmartnetBandplan[] | null;
    bandplanBase?: number | null;
    bandplanBase_not?: number | null;
    bandplanBase_in?: number[] | null;
    bandplanBase_not_in?: number[] | null;
    bandplanBase_lt?: number | null;
    bandplanBase_lte?: number | null;
    bandplanBase_gt?: number | null;
    bandplanBase_gte?: number | null;
    bandplanHigh?: number | null;
    bandplanHigh_not?: number | null;
    bandplanHigh_in?: number[] | null;
    bandplanHigh_not_in?: number[] | null;
    bandplanHigh_lt?: number | null;
    bandplanHigh_lte?: number | null;
    bandplanHigh_gt?: number | null;
    bandplanHigh_gte?: number | null;
    bandplanSpacing?: number | null;
    bandplanSpacing_not?: number | null;
    bandplanSpacing_in?: number[] | null;
    bandplanSpacing_not_in?: number[] | null;
    bandplanSpacing_lt?: number | null;
    bandplanSpacing_lte?: number | null;
    bandplanSpacing_gt?: number | null;
    bandplanSpacing_gte?: number | null;
    bandplanOffset?: number | null;
    bandplanOffset_not?: number | null;
    bandplanOffset_in?: number[] | null;
    bandplanOffset_not_in?: number[] | null;
    bandplanOffset_lt?: number | null;
    bandplanOffset_lte?: number | null;
    bandplanOffset_gt?: number | null;
    bandplanOffset_gte?: number | null;
    talkgroupDisplayFormat?: TalkgroupDisplayFormat | null;
    talkgroupDisplayFormat_not?: TalkgroupDisplayFormat | null;
    talkgroupDisplayFormat_in?: TalkgroupDisplayFormat[] | null;
    talkgroupDisplayFormat_not_in?: TalkgroupDisplayFormat[] | null;
    delayCreateOutput?: boolean | null;
    delayCreateOutput_not?: boolean | null;
    hideEncrypted?: boolean | null;
    hideEncrypted_not?: boolean | null;
    hideUnknownTalkgroups?: boolean | null;
    hideUnknownTalkgroups_not?: boolean | null;
    AND?: TrunkRecorderSystemWhereInput[] | null;
    OR?: TrunkRecorderSystemWhereInput[] | null;
    NOT?: TrunkRecorderSystemWhereInput[] | null;
  }

  export interface ArgsTrunkRecorderConfigs {
    where?: TrunkRecorderConfigWhereInput | null;
    orderBy?: TrunkRecorderConfigOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsTrunkRecorderConfigsConnection {
    where?: TrunkRecorderConfigWhereInput | null;
    orderBy?: TrunkRecorderConfigOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsTrunkRecorderSources {
    where?: TrunkRecorderSourceWhereInput | null;
    orderBy?: TrunkRecorderSourceOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsTrunkRecorderSourcesConnection {
    where?: TrunkRecorderSourceWhereInput | null;
    orderBy?: TrunkRecorderSourceOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsTrunkRecorderSystems {
    where?: TrunkRecorderSystemWhereInput | null;
    orderBy?: TrunkRecorderSystemOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsTrunkRecorderSystemsConnection {
    where?: TrunkRecorderSystemWhereInput | null;
    orderBy?: TrunkRecorderSystemOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsNode {
    id: string;
  }

  export type TrunkRecorderConfigsResolver = (
    parent: undefined,
    args: ArgsTrunkRecorderConfigs,
    ctx: Context,
    info: GraphQLResolveInfo
  ) =>
    | Array<TrunkRecorderConfig | null>
    | Promise<Array<TrunkRecorderConfig | null>>;

  export type TrunkRecorderConfigsConnectionResolver = (
    parent: undefined,
    args: ArgsTrunkRecorderConfigsConnection,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TrunkRecorderConfigConnection | Promise<TrunkRecorderConfigConnection>;

  export type TrunkRecorderSourcesResolver = (
    parent: undefined,
    args: ArgsTrunkRecorderSources,
    ctx: Context,
    info: GraphQLResolveInfo
  ) =>
    | Array<TrunkRecorderSource | null>
    | Promise<Array<TrunkRecorderSource | null>>;

  export type TrunkRecorderSourcesConnectionResolver = (
    parent: undefined,
    args: ArgsTrunkRecorderSourcesConnection,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TrunkRecorderSourceConnection | Promise<TrunkRecorderSourceConnection>;

  export type TrunkRecorderSystemsResolver = (
    parent: undefined,
    args: ArgsTrunkRecorderSystems,
    ctx: Context,
    info: GraphQLResolveInfo
  ) =>
    | Array<TrunkRecorderSystem | null>
    | Promise<Array<TrunkRecorderSystem | null>>;

  export type TrunkRecorderSystemsConnectionResolver = (
    parent: undefined,
    args: ArgsTrunkRecorderSystemsConnection,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TrunkRecorderSystemConnection | Promise<TrunkRecorderSystemConnection>;

  export type NodeResolver = (
    parent: undefined,
    args: ArgsNode,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => {} | null | Promise<{} | null>;

  export interface Type {
    trunkRecorderConfigs: (
      parent: undefined,
      args: ArgsTrunkRecorderConfigs,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | Array<TrunkRecorderConfig | null>
      | Promise<Array<TrunkRecorderConfig | null>>;

    trunkRecorderConfigsConnection: (
      parent: undefined,
      args: ArgsTrunkRecorderConfigsConnection,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TrunkRecorderConfigConnection | Promise<TrunkRecorderConfigConnection>;

    trunkRecorderSources: (
      parent: undefined,
      args: ArgsTrunkRecorderSources,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | Array<TrunkRecorderSource | null>
      | Promise<Array<TrunkRecorderSource | null>>;

    trunkRecorderSourcesConnection: (
      parent: undefined,
      args: ArgsTrunkRecorderSourcesConnection,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TrunkRecorderSourceConnection | Promise<TrunkRecorderSourceConnection>;

    trunkRecorderSystems: (
      parent: undefined,
      args: ArgsTrunkRecorderSystems,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | Array<TrunkRecorderSystem | null>
      | Promise<Array<TrunkRecorderSystem | null>>;

    trunkRecorderSystemsConnection: (
      parent: undefined,
      args: ArgsTrunkRecorderSystemsConnection,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TrunkRecorderSystemConnection | Promise<TrunkRecorderSystemConnection>;

    node: (
      parent: undefined,
      args: ArgsNode,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => {} | null | Promise<{} | null>;
  }
}

export namespace TrunkRecorderConfigResolvers {
  export const defaultResolvers = {
    defaultMode: (parent: TrunkRecorderConfig) => parent.defaultMode,
    captureDir: (parent: TrunkRecorderConfig) => parent.captureDir,
    callTimeout: (parent: TrunkRecorderConfig) => parent.callTimeout,
    logFile: (parent: TrunkRecorderConfig) => parent.logFile,
    frequencyFormat: (parent: TrunkRecorderConfig) => parent.frequencyFormat,
    controlWarnRate: (parent: TrunkRecorderConfig) => parent.controlWarnRate,
    statusAsString: (parent: TrunkRecorderConfig) => parent.statusAsString
  };

  export interface TrunkRecorderSourceWhereInput {
    center?: number | null;
    center_not?: number | null;
    center_in?: number[] | null;
    center_not_in?: number[] | null;
    center_lt?: number | null;
    center_lte?: number | null;
    center_gt?: number | null;
    center_gte?: number | null;
    rate?: number | null;
    rate_not?: number | null;
    rate_in?: number[] | null;
    rate_not_in?: number[] | null;
    rate_lt?: number | null;
    rate_lte?: number | null;
    rate_gt?: number | null;
    rate_gte?: number | null;
    squelch?: number | null;
    squelch_not?: number | null;
    squelch_in?: number[] | null;
    squelch_not_in?: number[] | null;
    squelch_lt?: number | null;
    squelch_lte?: number | null;
    squelch_gt?: number | null;
    squelch_gte?: number | null;
    error?: number | null;
    error_not?: number | null;
    error_in?: number[] | null;
    error_not_in?: number[] | null;
    error_lt?: number | null;
    error_lte?: number | null;
    error_gt?: number | null;
    error_gte?: number | null;
    gain?: number | null;
    gain_not?: number | null;
    gain_in?: number[] | null;
    gain_not_in?: number[] | null;
    gain_lt?: number | null;
    gain_lte?: number | null;
    gain_gt?: number | null;
    gain_gte?: number | null;
    digitalRecorders?: number | null;
    digitalRecorders_not?: number | null;
    digitalRecorders_in?: number[] | null;
    digitalRecorders_not_in?: number[] | null;
    digitalRecorders_lt?: number | null;
    digitalRecorders_lte?: number | null;
    digitalRecorders_gt?: number | null;
    digitalRecorders_gte?: number | null;
    digitalLevels?: number | null;
    digitalLevels_not?: number | null;
    digitalLevels_in?: number[] | null;
    digitalLevels_not_in?: number[] | null;
    digitalLevels_lt?: number | null;
    digitalLevels_lte?: number | null;
    digitalLevels_gt?: number | null;
    digitalLevels_gte?: number | null;
    analogRecorders?: number | null;
    analogRecorders_not?: number | null;
    analogRecorders_in?: number[] | null;
    analogRecorders_not_in?: number[] | null;
    analogRecorders_lt?: number | null;
    analogRecorders_lte?: number | null;
    analogRecorders_gt?: number | null;
    analogRecorders_gte?: number | null;
    analogLevels?: number | null;
    analogLevels_not?: number | null;
    analogLevels_in?: number[] | null;
    analogLevels_not_in?: number[] | null;
    analogLevels_lt?: number | null;
    analogLevels_lte?: number | null;
    analogLevels_gt?: number | null;
    analogLevels_gte?: number | null;
    device?: string | null;
    device_not?: string | null;
    device_in?: string[] | null;
    device_not_in?: string[] | null;
    device_lt?: string | null;
    device_lte?: string | null;
    device_gt?: string | null;
    device_gte?: string | null;
    device_contains?: string | null;
    device_not_contains?: string | null;
    device_starts_with?: string | null;
    device_not_starts_with?: string | null;
    device_ends_with?: string | null;
    device_not_ends_with?: string | null;
    modulation?: TrunkedModulation | null;
    modulation_not?: TrunkedModulation | null;
    modulation_in?: TrunkedModulation[] | null;
    modulation_not_in?: TrunkedModulation[] | null;
    AND?: TrunkRecorderSourceWhereInput[] | null;
    OR?: TrunkRecorderSourceWhereInput[] | null;
    NOT?: TrunkRecorderSourceWhereInput[] | null;
  }
  export interface TrunkRecorderSystemWhereInput {
    type?: TrunkedSystemType | null;
    type_not?: TrunkedSystemType | null;
    type_in?: TrunkedSystemType[] | null;
    type_not_in?: TrunkedSystemType[] | null;
    talkgroupsFile?: string | null;
    talkgroupsFile_not?: string | null;
    talkgroupsFile_in?: string[] | null;
    talkgroupsFile_not_in?: string[] | null;
    talkgroupsFile_lt?: string | null;
    talkgroupsFile_lte?: string | null;
    talkgroupsFile_gt?: string | null;
    talkgroupsFile_gte?: string | null;
    talkgroupsFile_contains?: string | null;
    talkgroupsFile_not_contains?: string | null;
    talkgroupsFile_starts_with?: string | null;
    talkgroupsFile_not_starts_with?: string | null;
    talkgroupsFile_ends_with?: string | null;
    talkgroupsFile_not_ends_with?: string | null;
    recordUnknown?: boolean | null;
    recordUnknown_not?: boolean | null;
    shortName?: string | null;
    shortName_not?: string | null;
    shortName_in?: string[] | null;
    shortName_not_in?: string[] | null;
    shortName_lt?: string | null;
    shortName_lte?: string | null;
    shortName_gt?: string | null;
    shortName_gte?: string | null;
    shortName_contains?: string | null;
    shortName_not_contains?: string | null;
    shortName_starts_with?: string | null;
    shortName_not_starts_with?: string | null;
    shortName_ends_with?: string | null;
    shortName_not_ends_with?: string | null;
    uploadScript?: string | null;
    uploadScript_not?: string | null;
    uploadScript_in?: string[] | null;
    uploadScript_not_in?: string[] | null;
    uploadScript_lt?: string | null;
    uploadScript_lte?: string | null;
    uploadScript_gt?: string | null;
    uploadScript_gte?: string | null;
    uploadScript_contains?: string | null;
    uploadScript_not_contains?: string | null;
    uploadScript_starts_with?: string | null;
    uploadScript_not_starts_with?: string | null;
    uploadScript_ends_with?: string | null;
    uploadScript_not_ends_with?: string | null;
    audioArchive?: boolean | null;
    audioArchive_not?: boolean | null;
    callLog?: boolean | null;
    callLog_not?: boolean | null;
    bandplan?: SmartnetBandplan | null;
    bandplan_not?: SmartnetBandplan | null;
    bandplan_in?: SmartnetBandplan[] | null;
    bandplan_not_in?: SmartnetBandplan[] | null;
    bandplanBase?: number | null;
    bandplanBase_not?: number | null;
    bandplanBase_in?: number[] | null;
    bandplanBase_not_in?: number[] | null;
    bandplanBase_lt?: number | null;
    bandplanBase_lte?: number | null;
    bandplanBase_gt?: number | null;
    bandplanBase_gte?: number | null;
    bandplanHigh?: number | null;
    bandplanHigh_not?: number | null;
    bandplanHigh_in?: number[] | null;
    bandplanHigh_not_in?: number[] | null;
    bandplanHigh_lt?: number | null;
    bandplanHigh_lte?: number | null;
    bandplanHigh_gt?: number | null;
    bandplanHigh_gte?: number | null;
    bandplanSpacing?: number | null;
    bandplanSpacing_not?: number | null;
    bandplanSpacing_in?: number[] | null;
    bandplanSpacing_not_in?: number[] | null;
    bandplanSpacing_lt?: number | null;
    bandplanSpacing_lte?: number | null;
    bandplanSpacing_gt?: number | null;
    bandplanSpacing_gte?: number | null;
    bandplanOffset?: number | null;
    bandplanOffset_not?: number | null;
    bandplanOffset_in?: number[] | null;
    bandplanOffset_not_in?: number[] | null;
    bandplanOffset_lt?: number | null;
    bandplanOffset_lte?: number | null;
    bandplanOffset_gt?: number | null;
    bandplanOffset_gte?: number | null;
    talkgroupDisplayFormat?: TalkgroupDisplayFormat | null;
    talkgroupDisplayFormat_not?: TalkgroupDisplayFormat | null;
    talkgroupDisplayFormat_in?: TalkgroupDisplayFormat[] | null;
    talkgroupDisplayFormat_not_in?: TalkgroupDisplayFormat[] | null;
    delayCreateOutput?: boolean | null;
    delayCreateOutput_not?: boolean | null;
    hideEncrypted?: boolean | null;
    hideEncrypted_not?: boolean | null;
    hideUnknownTalkgroups?: boolean | null;
    hideUnknownTalkgroups_not?: boolean | null;
    AND?: TrunkRecorderSystemWhereInput[] | null;
    OR?: TrunkRecorderSystemWhereInput[] | null;
    NOT?: TrunkRecorderSystemWhereInput[] | null;
  }

  export interface ArgsSources {
    where?: TrunkRecorderSourceWhereInput | null;
    orderBy?: TrunkRecorderSourceOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsSystems {
    where?: TrunkRecorderSystemWhereInput | null;
    orderBy?: TrunkRecorderSystemOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export type SourcesResolver = (
    parent: TrunkRecorderConfig,
    args: ArgsSources,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TrunkRecorderSource[] | null | Promise<TrunkRecorderSource[] | null>;

  export type SystemsResolver = (
    parent: TrunkRecorderConfig,
    args: ArgsSystems,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TrunkRecorderSystem[] | null | Promise<TrunkRecorderSystem[] | null>;

  export type DefaultModeResolver = (
    parent: TrunkRecorderConfig,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TrunkRecorderDefaultMode | Promise<TrunkRecorderDefaultMode>;

  export type CaptureDirResolver = (
    parent: TrunkRecorderConfig,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CallTimeoutResolver = (
    parent: TrunkRecorderConfig,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type LogFileResolver = (
    parent: TrunkRecorderConfig,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type FrequencyFormatResolver = (
    parent: TrunkRecorderConfig,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TrunkRecorderFrequencyFormat | Promise<TrunkRecorderFrequencyFormat>;

  export type ControlWarnRateResolver = (
    parent: TrunkRecorderConfig,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type StatusAsStringResolver = (
    parent: TrunkRecorderConfig,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export interface Type {
    sources: (
      parent: TrunkRecorderConfig,
      args: ArgsSources,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TrunkRecorderSource[] | null | Promise<TrunkRecorderSource[] | null>;

    systems: (
      parent: TrunkRecorderConfig,
      args: ArgsSystems,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TrunkRecorderSystem[] | null | Promise<TrunkRecorderSystem[] | null>;

    defaultMode: (
      parent: TrunkRecorderConfig,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TrunkRecorderDefaultMode | Promise<TrunkRecorderDefaultMode>;

    captureDir: (
      parent: TrunkRecorderConfig,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    callTimeout: (
      parent: TrunkRecorderConfig,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    logFile: (
      parent: TrunkRecorderConfig,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    frequencyFormat: (
      parent: TrunkRecorderConfig,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TrunkRecorderFrequencyFormat | Promise<TrunkRecorderFrequencyFormat>;

    controlWarnRate: (
      parent: TrunkRecorderConfig,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    statusAsString: (
      parent: TrunkRecorderConfig,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
  }
}

export namespace TrunkRecorderSourceResolvers {
  export const defaultResolvers = {
    center: (parent: TrunkRecorderSource) => parent.center,
    rate: (parent: TrunkRecorderSource) => parent.rate,
    squelch: (parent: TrunkRecorderSource) => parent.squelch,
    error: (parent: TrunkRecorderSource) => parent.error,
    gain: (parent: TrunkRecorderSource) => parent.gain,
    digitalRecorders: (parent: TrunkRecorderSource) => parent.digitalRecorders,
    digitalLevels: (parent: TrunkRecorderSource) =>
      parent.digitalLevels === undefined ? null : parent.digitalLevels,
    analogRecorders: (parent: TrunkRecorderSource) => parent.analogRecorders,
    analogLevels: (parent: TrunkRecorderSource) =>
      parent.analogLevels === undefined ? null : parent.analogLevels,
    device: (parent: TrunkRecorderSource) => parent.device,
    modulation: (parent: TrunkRecorderSource) => parent.modulation
  };

  export type CenterResolver = (
    parent: TrunkRecorderSource,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type RateResolver = (
    parent: TrunkRecorderSource,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type SquelchResolver = (
    parent: TrunkRecorderSource,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type ErrorResolver = (
    parent: TrunkRecorderSource,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type GainResolver = (
    parent: TrunkRecorderSource,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type DigitalRecordersResolver = (
    parent: TrunkRecorderSource,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type DigitalLevelsResolver = (
    parent: TrunkRecorderSource,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type AnalogRecordersResolver = (
    parent: TrunkRecorderSource,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type AnalogLevelsResolver = (
    parent: TrunkRecorderSource,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type DeviceResolver = (
    parent: TrunkRecorderSource,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ModulationResolver = (
    parent: TrunkRecorderSource,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TrunkedModulation | Promise<TrunkedModulation>;

  export interface Type {
    center: (
      parent: TrunkRecorderSource,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    rate: (
      parent: TrunkRecorderSource,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    squelch: (
      parent: TrunkRecorderSource,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    error: (
      parent: TrunkRecorderSource,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    gain: (
      parent: TrunkRecorderSource,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    digitalRecorders: (
      parent: TrunkRecorderSource,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    digitalLevels: (
      parent: TrunkRecorderSource,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    analogRecorders: (
      parent: TrunkRecorderSource,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    analogLevels: (
      parent: TrunkRecorderSource,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    device: (
      parent: TrunkRecorderSource,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    modulation: (
      parent: TrunkRecorderSource,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TrunkedModulation | Promise<TrunkedModulation>;
  }
}

export namespace TrunkRecorderSystemResolvers {
  export const defaultResolvers = {
    control_channels: (parent: TrunkRecorderSystem) => parent.control_channels,
    channels: (parent: TrunkRecorderSystem) => parent.channels,
    alphatags: (parent: TrunkRecorderSystem) => parent.alphatags,
    type: (parent: TrunkRecorderSystem) => parent.type,
    talkgroupsFile: (parent: TrunkRecorderSystem) =>
      parent.talkgroupsFile === undefined ? null : parent.talkgroupsFile,
    recordUnknown: (parent: TrunkRecorderSystem) =>
      parent.recordUnknown === undefined ? null : parent.recordUnknown,
    shortName: (parent: TrunkRecorderSystem) => parent.shortName,
    uploadScript: (parent: TrunkRecorderSystem) => parent.uploadScript,
    audioArchive: (parent: TrunkRecorderSystem) => parent.audioArchive,
    callLog: (parent: TrunkRecorderSystem) => parent.callLog,
    bandplan: (parent: TrunkRecorderSystem) => parent.bandplan,
    bandplanBase: (parent: TrunkRecorderSystem) =>
      parent.bandplanBase === undefined ? null : parent.bandplanBase,
    bandplanHigh: (parent: TrunkRecorderSystem) =>
      parent.bandplanHigh === undefined ? null : parent.bandplanHigh,
    bandplanSpacing: (parent: TrunkRecorderSystem) =>
      parent.bandplanSpacing === undefined ? null : parent.bandplanSpacing,
    bandplanOffset: (parent: TrunkRecorderSystem) =>
      parent.bandplanOffset === undefined ? null : parent.bandplanOffset,
    talkgroupDisplayFormat: (parent: TrunkRecorderSystem) =>
      parent.talkgroupDisplayFormat === undefined
        ? null
        : parent.talkgroupDisplayFormat,
    delayCreateOutput: (parent: TrunkRecorderSystem) =>
      parent.delayCreateOutput === undefined ? null : parent.delayCreateOutput,
    hideEncrypted: (parent: TrunkRecorderSystem) => parent.hideEncrypted,
    hideUnknownTalkgroups: (parent: TrunkRecorderSystem) =>
      parent.hideUnknownTalkgroups
  };

  export type Control_channelsResolver = (
    parent: TrunkRecorderSystem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number[] | Promise<number[]>;

  export type ChannelsResolver = (
    parent: TrunkRecorderSystem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number[] | Promise<number[]>;

  export type AlphatagsResolver = (
    parent: TrunkRecorderSystem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string[] | Promise<string[]>;

  export type TypeResolver = (
    parent: TrunkRecorderSystem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TrunkedSystemType | Promise<TrunkedSystemType>;

  export type TalkgroupsFileResolver = (
    parent: TrunkRecorderSystem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type RecordUnknownResolver = (
    parent: TrunkRecorderSystem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export type ShortNameResolver = (
    parent: TrunkRecorderSystem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UploadScriptResolver = (
    parent: TrunkRecorderSystem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type AudioArchiveResolver = (
    parent: TrunkRecorderSystem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type CallLogResolver = (
    parent: TrunkRecorderSystem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type BandplanResolver = (
    parent: TrunkRecorderSystem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => SmartnetBandplan | Promise<SmartnetBandplan>;

  export type BandplanBaseResolver = (
    parent: TrunkRecorderSystem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type BandplanHighResolver = (
    parent: TrunkRecorderSystem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type BandplanSpacingResolver = (
    parent: TrunkRecorderSystem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type BandplanOffsetResolver = (
    parent: TrunkRecorderSystem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type TalkgroupDisplayFormatResolver = (
    parent: TrunkRecorderSystem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TalkgroupDisplayFormat | null | Promise<TalkgroupDisplayFormat | null>;

  export type DelayCreateOutputResolver = (
    parent: TrunkRecorderSystem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export type HideEncryptedResolver = (
    parent: TrunkRecorderSystem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type HideUnknownTalkgroupsResolver = (
    parent: TrunkRecorderSystem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export interface Type {
    control_channels: (
      parent: TrunkRecorderSystem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number[] | Promise<number[]>;

    channels: (
      parent: TrunkRecorderSystem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number[] | Promise<number[]>;

    alphatags: (
      parent: TrunkRecorderSystem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string[] | Promise<string[]>;

    type: (
      parent: TrunkRecorderSystem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TrunkedSystemType | Promise<TrunkedSystemType>;

    talkgroupsFile: (
      parent: TrunkRecorderSystem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    recordUnknown: (
      parent: TrunkRecorderSystem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;

    shortName: (
      parent: TrunkRecorderSystem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    uploadScript: (
      parent: TrunkRecorderSystem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    audioArchive: (
      parent: TrunkRecorderSystem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    callLog: (
      parent: TrunkRecorderSystem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    bandplan: (
      parent: TrunkRecorderSystem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => SmartnetBandplan | Promise<SmartnetBandplan>;

    bandplanBase: (
      parent: TrunkRecorderSystem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    bandplanHigh: (
      parent: TrunkRecorderSystem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    bandplanSpacing: (
      parent: TrunkRecorderSystem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    bandplanOffset: (
      parent: TrunkRecorderSystem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    talkgroupDisplayFormat: (
      parent: TrunkRecorderSystem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TalkgroupDisplayFormat | null | Promise<TalkgroupDisplayFormat | null>;

    delayCreateOutput: (
      parent: TrunkRecorderSystem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;

    hideEncrypted: (
      parent: TrunkRecorderSystem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    hideUnknownTalkgroups: (
      parent: TrunkRecorderSystem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
  }
}

export namespace TrunkRecorderConfigConnectionResolvers {
  export const defaultResolvers = {
    pageInfo: (parent: TrunkRecorderConfigConnection) => parent.pageInfo,
    edges: (parent: TrunkRecorderConfigConnection) => parent.edges
  };

  export type PageInfoResolver = (
    parent: TrunkRecorderConfigConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PageInfo | Promise<PageInfo>;

  export type EdgesResolver = (
    parent: TrunkRecorderConfigConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) =>
    | Array<TrunkRecorderConfigEdge | null>
    | Promise<Array<TrunkRecorderConfigEdge | null>>;

  export type AggregateResolver = (
    parent: TrunkRecorderConfigConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AggregateTrunkRecorderConfig | Promise<AggregateTrunkRecorderConfig>;

  export interface Type {
    pageInfo: (
      parent: TrunkRecorderConfigConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PageInfo | Promise<PageInfo>;

    edges: (
      parent: TrunkRecorderConfigConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | Array<TrunkRecorderConfigEdge | null>
      | Promise<Array<TrunkRecorderConfigEdge | null>>;

    aggregate: (
      parent: TrunkRecorderConfigConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AggregateTrunkRecorderConfig | Promise<AggregateTrunkRecorderConfig>;
  }
}

export namespace PageInfoResolvers {
  export const defaultResolvers = {
    hasNextPage: (parent: PageInfo) => parent.hasNextPage,
    hasPreviousPage: (parent: PageInfo) => parent.hasPreviousPage,
    startCursor: (parent: PageInfo) =>
      parent.startCursor === undefined ? null : parent.startCursor,
    endCursor: (parent: PageInfo) =>
      parent.endCursor === undefined ? null : parent.endCursor
  };

  export type HasNextPageResolver = (
    parent: PageInfo,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type HasPreviousPageResolver = (
    parent: PageInfo,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type StartCursorResolver = (
    parent: PageInfo,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type EndCursorResolver = (
    parent: PageInfo,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    hasNextPage: (
      parent: PageInfo,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    hasPreviousPage: (
      parent: PageInfo,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    startCursor: (
      parent: PageInfo,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    endCursor: (
      parent: PageInfo,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export namespace TrunkRecorderConfigEdgeResolvers {
  export const defaultResolvers = {
    node: (parent: TrunkRecorderConfigEdge) => parent.node,
    cursor: (parent: TrunkRecorderConfigEdge) => parent.cursor
  };

  export type NodeResolver = (
    parent: TrunkRecorderConfigEdge,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TrunkRecorderConfig | Promise<TrunkRecorderConfig>;

  export type CursorResolver = (
    parent: TrunkRecorderConfigEdge,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    node: (
      parent: TrunkRecorderConfigEdge,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TrunkRecorderConfig | Promise<TrunkRecorderConfig>;

    cursor: (
      parent: TrunkRecorderConfigEdge,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace AggregateTrunkRecorderConfigResolvers {
  export const defaultResolvers = {
    count: (parent: AggregateTrunkRecorderConfig) => parent.count
  };

  export type CountResolver = (
    parent: AggregateTrunkRecorderConfig,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type {
    count: (
      parent: AggregateTrunkRecorderConfig,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
  }
}

export namespace TrunkRecorderSourceConnectionResolvers {
  export const defaultResolvers = {
    pageInfo: (parent: TrunkRecorderSourceConnection) => parent.pageInfo,
    edges: (parent: TrunkRecorderSourceConnection) => parent.edges
  };

  export type PageInfoResolver = (
    parent: TrunkRecorderSourceConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PageInfo | Promise<PageInfo>;

  export type EdgesResolver = (
    parent: TrunkRecorderSourceConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) =>
    | Array<TrunkRecorderSourceEdge | null>
    | Promise<Array<TrunkRecorderSourceEdge | null>>;

  export type AggregateResolver = (
    parent: TrunkRecorderSourceConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AggregateTrunkRecorderSource | Promise<AggregateTrunkRecorderSource>;

  export interface Type {
    pageInfo: (
      parent: TrunkRecorderSourceConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PageInfo | Promise<PageInfo>;

    edges: (
      parent: TrunkRecorderSourceConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | Array<TrunkRecorderSourceEdge | null>
      | Promise<Array<TrunkRecorderSourceEdge | null>>;

    aggregate: (
      parent: TrunkRecorderSourceConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AggregateTrunkRecorderSource | Promise<AggregateTrunkRecorderSource>;
  }
}

export namespace TrunkRecorderSourceEdgeResolvers {
  export const defaultResolvers = {
    node: (parent: TrunkRecorderSourceEdge) => parent.node,
    cursor: (parent: TrunkRecorderSourceEdge) => parent.cursor
  };

  export type NodeResolver = (
    parent: TrunkRecorderSourceEdge,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TrunkRecorderSource | Promise<TrunkRecorderSource>;

  export type CursorResolver = (
    parent: TrunkRecorderSourceEdge,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    node: (
      parent: TrunkRecorderSourceEdge,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TrunkRecorderSource | Promise<TrunkRecorderSource>;

    cursor: (
      parent: TrunkRecorderSourceEdge,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace AggregateTrunkRecorderSourceResolvers {
  export const defaultResolvers = {
    count: (parent: AggregateTrunkRecorderSource) => parent.count
  };

  export type CountResolver = (
    parent: AggregateTrunkRecorderSource,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type {
    count: (
      parent: AggregateTrunkRecorderSource,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
  }
}

export namespace TrunkRecorderSystemConnectionResolvers {
  export const defaultResolvers = {
    pageInfo: (parent: TrunkRecorderSystemConnection) => parent.pageInfo,
    edges: (parent: TrunkRecorderSystemConnection) => parent.edges
  };

  export type PageInfoResolver = (
    parent: TrunkRecorderSystemConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => PageInfo | Promise<PageInfo>;

  export type EdgesResolver = (
    parent: TrunkRecorderSystemConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) =>
    | Array<TrunkRecorderSystemEdge | null>
    | Promise<Array<TrunkRecorderSystemEdge | null>>;

  export type AggregateResolver = (
    parent: TrunkRecorderSystemConnection,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AggregateTrunkRecorderSystem | Promise<AggregateTrunkRecorderSystem>;

  export interface Type {
    pageInfo: (
      parent: TrunkRecorderSystemConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => PageInfo | Promise<PageInfo>;

    edges: (
      parent: TrunkRecorderSystemConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | Array<TrunkRecorderSystemEdge | null>
      | Promise<Array<TrunkRecorderSystemEdge | null>>;

    aggregate: (
      parent: TrunkRecorderSystemConnection,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AggregateTrunkRecorderSystem | Promise<AggregateTrunkRecorderSystem>;
  }
}

export namespace TrunkRecorderSystemEdgeResolvers {
  export const defaultResolvers = {
    node: (parent: TrunkRecorderSystemEdge) => parent.node,
    cursor: (parent: TrunkRecorderSystemEdge) => parent.cursor
  };

  export type NodeResolver = (
    parent: TrunkRecorderSystemEdge,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TrunkRecorderSystem | Promise<TrunkRecorderSystem>;

  export type CursorResolver = (
    parent: TrunkRecorderSystemEdge,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    node: (
      parent: TrunkRecorderSystemEdge,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TrunkRecorderSystem | Promise<TrunkRecorderSystem>;

    cursor: (
      parent: TrunkRecorderSystemEdge,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace AggregateTrunkRecorderSystemResolvers {
  export const defaultResolvers = {
    count: (parent: AggregateTrunkRecorderSystem) => parent.count
  };

  export type CountResolver = (
    parent: AggregateTrunkRecorderSystem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type {
    count: (
      parent: AggregateTrunkRecorderSystem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface TrunkRecorderConfigCreateInput {
    sources?: TrunkRecorderSourceCreateManyInput | null;
    systems?: TrunkRecorderSystemCreateManyInput | null;
    defaultMode?: TrunkRecorderDefaultMode | null;
    captureDir: string;
    callTimeout?: number | null;
    logFile?: boolean | null;
    frequencyFormat?: TrunkRecorderFrequencyFormat | null;
    controlWarnRate?: number | null;
    statusAsString?: boolean | null;
  }
  export interface TrunkRecorderConfigUpdateManyMutationInput {
    defaultMode?: TrunkRecorderDefaultMode | null;
    captureDir?: string | null;
    callTimeout?: number | null;
    logFile?: boolean | null;
    frequencyFormat?: TrunkRecorderFrequencyFormat | null;
    controlWarnRate?: number | null;
    statusAsString?: boolean | null;
  }
  export interface TrunkRecorderConfigWhereInput {
    sources_every?: TrunkRecorderSourceWhereInput | null;
    sources_some?: TrunkRecorderSourceWhereInput | null;
    sources_none?: TrunkRecorderSourceWhereInput | null;
    systems_every?: TrunkRecorderSystemWhereInput | null;
    systems_some?: TrunkRecorderSystemWhereInput | null;
    systems_none?: TrunkRecorderSystemWhereInput | null;
    defaultMode?: TrunkRecorderDefaultMode | null;
    defaultMode_not?: TrunkRecorderDefaultMode | null;
    defaultMode_in?: TrunkRecorderDefaultMode[] | null;
    defaultMode_not_in?: TrunkRecorderDefaultMode[] | null;
    captureDir?: string | null;
    captureDir_not?: string | null;
    captureDir_in?: string[] | null;
    captureDir_not_in?: string[] | null;
    captureDir_lt?: string | null;
    captureDir_lte?: string | null;
    captureDir_gt?: string | null;
    captureDir_gte?: string | null;
    captureDir_contains?: string | null;
    captureDir_not_contains?: string | null;
    captureDir_starts_with?: string | null;
    captureDir_not_starts_with?: string | null;
    captureDir_ends_with?: string | null;
    captureDir_not_ends_with?: string | null;
    callTimeout?: number | null;
    callTimeout_not?: number | null;
    callTimeout_in?: number[] | null;
    callTimeout_not_in?: number[] | null;
    callTimeout_lt?: number | null;
    callTimeout_lte?: number | null;
    callTimeout_gt?: number | null;
    callTimeout_gte?: number | null;
    logFile?: boolean | null;
    logFile_not?: boolean | null;
    frequencyFormat?: TrunkRecorderFrequencyFormat | null;
    frequencyFormat_not?: TrunkRecorderFrequencyFormat | null;
    frequencyFormat_in?: TrunkRecorderFrequencyFormat[] | null;
    frequencyFormat_not_in?: TrunkRecorderFrequencyFormat[] | null;
    controlWarnRate?: number | null;
    controlWarnRate_not?: number | null;
    controlWarnRate_in?: number[] | null;
    controlWarnRate_not_in?: number[] | null;
    controlWarnRate_lt?: number | null;
    controlWarnRate_lte?: number | null;
    controlWarnRate_gt?: number | null;
    controlWarnRate_gte?: number | null;
    statusAsString?: boolean | null;
    statusAsString_not?: boolean | null;
    AND?: TrunkRecorderConfigWhereInput[] | null;
    OR?: TrunkRecorderConfigWhereInput[] | null;
    NOT?: TrunkRecorderConfigWhereInput[] | null;
  }
  export interface TrunkRecorderSourceCreateInput {
    center: number;
    rate: number;
    squelch?: number | null;
    error?: number | null;
    gain?: number | null;
    digitalRecorders?: number | null;
    digitalLevels?: number | null;
    analogRecorders?: number | null;
    analogLevels?: number | null;
    device: string;
    modulation: TrunkedModulation;
  }
  export interface TrunkRecorderSourceUpdateManyMutationInput {
    center?: number | null;
    rate?: number | null;
    squelch?: number | null;
    error?: number | null;
    gain?: number | null;
    digitalRecorders?: number | null;
    digitalLevels?: number | null;
    analogRecorders?: number | null;
    analogLevels?: number | null;
    device?: string | null;
    modulation?: TrunkedModulation | null;
  }
  export interface TrunkRecorderSourceWhereInput {
    center?: number | null;
    center_not?: number | null;
    center_in?: number[] | null;
    center_not_in?: number[] | null;
    center_lt?: number | null;
    center_lte?: number | null;
    center_gt?: number | null;
    center_gte?: number | null;
    rate?: number | null;
    rate_not?: number | null;
    rate_in?: number[] | null;
    rate_not_in?: number[] | null;
    rate_lt?: number | null;
    rate_lte?: number | null;
    rate_gt?: number | null;
    rate_gte?: number | null;
    squelch?: number | null;
    squelch_not?: number | null;
    squelch_in?: number[] | null;
    squelch_not_in?: number[] | null;
    squelch_lt?: number | null;
    squelch_lte?: number | null;
    squelch_gt?: number | null;
    squelch_gte?: number | null;
    error?: number | null;
    error_not?: number | null;
    error_in?: number[] | null;
    error_not_in?: number[] | null;
    error_lt?: number | null;
    error_lte?: number | null;
    error_gt?: number | null;
    error_gte?: number | null;
    gain?: number | null;
    gain_not?: number | null;
    gain_in?: number[] | null;
    gain_not_in?: number[] | null;
    gain_lt?: number | null;
    gain_lte?: number | null;
    gain_gt?: number | null;
    gain_gte?: number | null;
    digitalRecorders?: number | null;
    digitalRecorders_not?: number | null;
    digitalRecorders_in?: number[] | null;
    digitalRecorders_not_in?: number[] | null;
    digitalRecorders_lt?: number | null;
    digitalRecorders_lte?: number | null;
    digitalRecorders_gt?: number | null;
    digitalRecorders_gte?: number | null;
    digitalLevels?: number | null;
    digitalLevels_not?: number | null;
    digitalLevels_in?: number[] | null;
    digitalLevels_not_in?: number[] | null;
    digitalLevels_lt?: number | null;
    digitalLevels_lte?: number | null;
    digitalLevels_gt?: number | null;
    digitalLevels_gte?: number | null;
    analogRecorders?: number | null;
    analogRecorders_not?: number | null;
    analogRecorders_in?: number[] | null;
    analogRecorders_not_in?: number[] | null;
    analogRecorders_lt?: number | null;
    analogRecorders_lte?: number | null;
    analogRecorders_gt?: number | null;
    analogRecorders_gte?: number | null;
    analogLevels?: number | null;
    analogLevels_not?: number | null;
    analogLevels_in?: number[] | null;
    analogLevels_not_in?: number[] | null;
    analogLevels_lt?: number | null;
    analogLevels_lte?: number | null;
    analogLevels_gt?: number | null;
    analogLevels_gte?: number | null;
    device?: string | null;
    device_not?: string | null;
    device_in?: string[] | null;
    device_not_in?: string[] | null;
    device_lt?: string | null;
    device_lte?: string | null;
    device_gt?: string | null;
    device_gte?: string | null;
    device_contains?: string | null;
    device_not_contains?: string | null;
    device_starts_with?: string | null;
    device_not_starts_with?: string | null;
    device_ends_with?: string | null;
    device_not_ends_with?: string | null;
    modulation?: TrunkedModulation | null;
    modulation_not?: TrunkedModulation | null;
    modulation_in?: TrunkedModulation[] | null;
    modulation_not_in?: TrunkedModulation[] | null;
    AND?: TrunkRecorderSourceWhereInput[] | null;
    OR?: TrunkRecorderSourceWhereInput[] | null;
    NOT?: TrunkRecorderSourceWhereInput[] | null;
  }
  export interface TrunkRecorderSystemCreateInput {
    control_channels?: TrunkRecorderSystemCreatecontrol_channelsInput | null;
    channels?: TrunkRecorderSystemCreatechannelsInput | null;
    alphatags?: TrunkRecorderSystemCreatealphatagsInput | null;
    type: TrunkedSystemType;
    talkgroupsFile?: string | null;
    recordUnknown?: boolean | null;
    shortName: string;
    uploadScript: string;
    audioArchive?: boolean | null;
    callLog?: boolean | null;
    bandplan?: SmartnetBandplan | null;
    bandplanBase?: number | null;
    bandplanHigh?: number | null;
    bandplanSpacing?: number | null;
    bandplanOffset?: number | null;
    talkgroupDisplayFormat?: TalkgroupDisplayFormat | null;
    delayCreateOutput?: boolean | null;
    hideEncrypted?: boolean | null;
    hideUnknownTalkgroups?: boolean | null;
  }
  export interface TrunkRecorderSystemUpdateManyMutationInput {
    control_channels?: TrunkRecorderSystemUpdatecontrol_channelsInput | null;
    channels?: TrunkRecorderSystemUpdatechannelsInput | null;
    alphatags?: TrunkRecorderSystemUpdatealphatagsInput | null;
    type?: TrunkedSystemType | null;
    talkgroupsFile?: string | null;
    recordUnknown?: boolean | null;
    shortName?: string | null;
    uploadScript?: string | null;
    audioArchive?: boolean | null;
    callLog?: boolean | null;
    bandplan?: SmartnetBandplan | null;
    bandplanBase?: number | null;
    bandplanHigh?: number | null;
    bandplanSpacing?: number | null;
    bandplanOffset?: number | null;
    talkgroupDisplayFormat?: TalkgroupDisplayFormat | null;
    delayCreateOutput?: boolean | null;
    hideEncrypted?: boolean | null;
    hideUnknownTalkgroups?: boolean | null;
  }
  export interface TrunkRecorderSystemWhereInput {
    type?: TrunkedSystemType | null;
    type_not?: TrunkedSystemType | null;
    type_in?: TrunkedSystemType[] | null;
    type_not_in?: TrunkedSystemType[] | null;
    talkgroupsFile?: string | null;
    talkgroupsFile_not?: string | null;
    talkgroupsFile_in?: string[] | null;
    talkgroupsFile_not_in?: string[] | null;
    talkgroupsFile_lt?: string | null;
    talkgroupsFile_lte?: string | null;
    talkgroupsFile_gt?: string | null;
    talkgroupsFile_gte?: string | null;
    talkgroupsFile_contains?: string | null;
    talkgroupsFile_not_contains?: string | null;
    talkgroupsFile_starts_with?: string | null;
    talkgroupsFile_not_starts_with?: string | null;
    talkgroupsFile_ends_with?: string | null;
    talkgroupsFile_not_ends_with?: string | null;
    recordUnknown?: boolean | null;
    recordUnknown_not?: boolean | null;
    shortName?: string | null;
    shortName_not?: string | null;
    shortName_in?: string[] | null;
    shortName_not_in?: string[] | null;
    shortName_lt?: string | null;
    shortName_lte?: string | null;
    shortName_gt?: string | null;
    shortName_gte?: string | null;
    shortName_contains?: string | null;
    shortName_not_contains?: string | null;
    shortName_starts_with?: string | null;
    shortName_not_starts_with?: string | null;
    shortName_ends_with?: string | null;
    shortName_not_ends_with?: string | null;
    uploadScript?: string | null;
    uploadScript_not?: string | null;
    uploadScript_in?: string[] | null;
    uploadScript_not_in?: string[] | null;
    uploadScript_lt?: string | null;
    uploadScript_lte?: string | null;
    uploadScript_gt?: string | null;
    uploadScript_gte?: string | null;
    uploadScript_contains?: string | null;
    uploadScript_not_contains?: string | null;
    uploadScript_starts_with?: string | null;
    uploadScript_not_starts_with?: string | null;
    uploadScript_ends_with?: string | null;
    uploadScript_not_ends_with?: string | null;
    audioArchive?: boolean | null;
    audioArchive_not?: boolean | null;
    callLog?: boolean | null;
    callLog_not?: boolean | null;
    bandplan?: SmartnetBandplan | null;
    bandplan_not?: SmartnetBandplan | null;
    bandplan_in?: SmartnetBandplan[] | null;
    bandplan_not_in?: SmartnetBandplan[] | null;
    bandplanBase?: number | null;
    bandplanBase_not?: number | null;
    bandplanBase_in?: number[] | null;
    bandplanBase_not_in?: number[] | null;
    bandplanBase_lt?: number | null;
    bandplanBase_lte?: number | null;
    bandplanBase_gt?: number | null;
    bandplanBase_gte?: number | null;
    bandplanHigh?: number | null;
    bandplanHigh_not?: number | null;
    bandplanHigh_in?: number[] | null;
    bandplanHigh_not_in?: number[] | null;
    bandplanHigh_lt?: number | null;
    bandplanHigh_lte?: number | null;
    bandplanHigh_gt?: number | null;
    bandplanHigh_gte?: number | null;
    bandplanSpacing?: number | null;
    bandplanSpacing_not?: number | null;
    bandplanSpacing_in?: number[] | null;
    bandplanSpacing_not_in?: number[] | null;
    bandplanSpacing_lt?: number | null;
    bandplanSpacing_lte?: number | null;
    bandplanSpacing_gt?: number | null;
    bandplanSpacing_gte?: number | null;
    bandplanOffset?: number | null;
    bandplanOffset_not?: number | null;
    bandplanOffset_in?: number[] | null;
    bandplanOffset_not_in?: number[] | null;
    bandplanOffset_lt?: number | null;
    bandplanOffset_lte?: number | null;
    bandplanOffset_gt?: number | null;
    bandplanOffset_gte?: number | null;
    talkgroupDisplayFormat?: TalkgroupDisplayFormat | null;
    talkgroupDisplayFormat_not?: TalkgroupDisplayFormat | null;
    talkgroupDisplayFormat_in?: TalkgroupDisplayFormat[] | null;
    talkgroupDisplayFormat_not_in?: TalkgroupDisplayFormat[] | null;
    delayCreateOutput?: boolean | null;
    delayCreateOutput_not?: boolean | null;
    hideEncrypted?: boolean | null;
    hideEncrypted_not?: boolean | null;
    hideUnknownTalkgroups?: boolean | null;
    hideUnknownTalkgroups_not?: boolean | null;
    AND?: TrunkRecorderSystemWhereInput[] | null;
    OR?: TrunkRecorderSystemWhereInput[] | null;
    NOT?: TrunkRecorderSystemWhereInput[] | null;
  }
  export interface TrunkRecorderSourceCreateManyInput {
    create?: TrunkRecorderSourceCreateInput[] | null;
  }
  export interface TrunkRecorderSystemCreateManyInput {
    create?: TrunkRecorderSystemCreateInput[] | null;
  }
  export interface TrunkRecorderSystemCreatecontrol_channelsInput {
    set?: number[] | null;
  }
  export interface TrunkRecorderSystemCreatechannelsInput {
    set?: number[] | null;
  }
  export interface TrunkRecorderSystemCreatealphatagsInput {
    set?: string[] | null;
  }
  export interface TrunkRecorderSystemUpdatecontrol_channelsInput {
    set?: number[] | null;
  }
  export interface TrunkRecorderSystemUpdatechannelsInput {
    set?: number[] | null;
  }
  export interface TrunkRecorderSystemUpdatealphatagsInput {
    set?: string[] | null;
  }

  export interface ArgsCreateTrunkRecorderConfig {
    data: TrunkRecorderConfigCreateInput;
  }

  export interface ArgsUpdateManyTrunkRecorderConfigs {
    data: TrunkRecorderConfigUpdateManyMutationInput;
    where?: TrunkRecorderConfigWhereInput | null;
  }

  export interface ArgsDeleteManyTrunkRecorderConfigs {
    where?: TrunkRecorderConfigWhereInput | null;
  }

  export interface ArgsCreateTrunkRecorderSource {
    data: TrunkRecorderSourceCreateInput;
  }

  export interface ArgsUpdateManyTrunkRecorderSources {
    data: TrunkRecorderSourceUpdateManyMutationInput;
    where?: TrunkRecorderSourceWhereInput | null;
  }

  export interface ArgsDeleteManyTrunkRecorderSources {
    where?: TrunkRecorderSourceWhereInput | null;
  }

  export interface ArgsCreateTrunkRecorderSystem {
    data: TrunkRecorderSystemCreateInput;
  }

  export interface ArgsUpdateManyTrunkRecorderSystems {
    data: TrunkRecorderSystemUpdateManyMutationInput;
    where?: TrunkRecorderSystemWhereInput | null;
  }

  export interface ArgsDeleteManyTrunkRecorderSystems {
    where?: TrunkRecorderSystemWhereInput | null;
  }

  export type CreateTrunkRecorderConfigResolver = (
    parent: undefined,
    args: ArgsCreateTrunkRecorderConfig,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TrunkRecorderConfig | Promise<TrunkRecorderConfig>;

  export type UpdateManyTrunkRecorderConfigsResolver = (
    parent: undefined,
    args: ArgsUpdateManyTrunkRecorderConfigs,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => BatchPayload | Promise<BatchPayload>;

  export type DeleteManyTrunkRecorderConfigsResolver = (
    parent: undefined,
    args: ArgsDeleteManyTrunkRecorderConfigs,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => BatchPayload | Promise<BatchPayload>;

  export type CreateTrunkRecorderSourceResolver = (
    parent: undefined,
    args: ArgsCreateTrunkRecorderSource,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TrunkRecorderSource | Promise<TrunkRecorderSource>;

  export type UpdateManyTrunkRecorderSourcesResolver = (
    parent: undefined,
    args: ArgsUpdateManyTrunkRecorderSources,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => BatchPayload | Promise<BatchPayload>;

  export type DeleteManyTrunkRecorderSourcesResolver = (
    parent: undefined,
    args: ArgsDeleteManyTrunkRecorderSources,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => BatchPayload | Promise<BatchPayload>;

  export type CreateTrunkRecorderSystemResolver = (
    parent: undefined,
    args: ArgsCreateTrunkRecorderSystem,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TrunkRecorderSystem | Promise<TrunkRecorderSystem>;

  export type UpdateManyTrunkRecorderSystemsResolver = (
    parent: undefined,
    args: ArgsUpdateManyTrunkRecorderSystems,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => BatchPayload | Promise<BatchPayload>;

  export type DeleteManyTrunkRecorderSystemsResolver = (
    parent: undefined,
    args: ArgsDeleteManyTrunkRecorderSystems,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => BatchPayload | Promise<BatchPayload>;

  export interface Type {
    createTrunkRecorderConfig: (
      parent: undefined,
      args: ArgsCreateTrunkRecorderConfig,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TrunkRecorderConfig | Promise<TrunkRecorderConfig>;

    updateManyTrunkRecorderConfigs: (
      parent: undefined,
      args: ArgsUpdateManyTrunkRecorderConfigs,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => BatchPayload | Promise<BatchPayload>;

    deleteManyTrunkRecorderConfigs: (
      parent: undefined,
      args: ArgsDeleteManyTrunkRecorderConfigs,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => BatchPayload | Promise<BatchPayload>;

    createTrunkRecorderSource: (
      parent: undefined,
      args: ArgsCreateTrunkRecorderSource,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TrunkRecorderSource | Promise<TrunkRecorderSource>;

    updateManyTrunkRecorderSources: (
      parent: undefined,
      args: ArgsUpdateManyTrunkRecorderSources,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => BatchPayload | Promise<BatchPayload>;

    deleteManyTrunkRecorderSources: (
      parent: undefined,
      args: ArgsDeleteManyTrunkRecorderSources,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => BatchPayload | Promise<BatchPayload>;

    createTrunkRecorderSystem: (
      parent: undefined,
      args: ArgsCreateTrunkRecorderSystem,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TrunkRecorderSystem | Promise<TrunkRecorderSystem>;

    updateManyTrunkRecorderSystems: (
      parent: undefined,
      args: ArgsUpdateManyTrunkRecorderSystems,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => BatchPayload | Promise<BatchPayload>;

    deleteManyTrunkRecorderSystems: (
      parent: undefined,
      args: ArgsDeleteManyTrunkRecorderSystems,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => BatchPayload | Promise<BatchPayload>;
  }
}

export namespace BatchPayloadResolvers {
  export const defaultResolvers = {
    count: (parent: BatchPayload) => parent.count
  };

  export type CountResolver = (
    parent: BatchPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    count: (
      parent: BatchPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace SubscriptionResolvers {
  export const defaultResolvers = {};

  export interface TrunkRecorderConfigSubscriptionWhereInput {
    mutation_in?: MutationType[] | null;
    updatedFields_contains?: string | null;
    updatedFields_contains_every?: string[] | null;
    updatedFields_contains_some?: string[] | null;
    node?: TrunkRecorderConfigWhereInput | null;
    AND?: TrunkRecorderConfigSubscriptionWhereInput[] | null;
    OR?: TrunkRecorderConfigSubscriptionWhereInput[] | null;
    NOT?: TrunkRecorderConfigSubscriptionWhereInput[] | null;
  }
  export interface TrunkRecorderSourceSubscriptionWhereInput {
    mutation_in?: MutationType[] | null;
    updatedFields_contains?: string | null;
    updatedFields_contains_every?: string[] | null;
    updatedFields_contains_some?: string[] | null;
    node?: TrunkRecorderSourceWhereInput | null;
    AND?: TrunkRecorderSourceSubscriptionWhereInput[] | null;
    OR?: TrunkRecorderSourceSubscriptionWhereInput[] | null;
    NOT?: TrunkRecorderSourceSubscriptionWhereInput[] | null;
  }
  export interface TrunkRecorderSystemSubscriptionWhereInput {
    mutation_in?: MutationType[] | null;
    updatedFields_contains?: string | null;
    updatedFields_contains_every?: string[] | null;
    updatedFields_contains_some?: string[] | null;
    node?: TrunkRecorderSystemWhereInput | null;
    AND?: TrunkRecorderSystemSubscriptionWhereInput[] | null;
    OR?: TrunkRecorderSystemSubscriptionWhereInput[] | null;
    NOT?: TrunkRecorderSystemSubscriptionWhereInput[] | null;
  }
  export interface TrunkRecorderConfigWhereInput {
    sources_every?: TrunkRecorderSourceWhereInput | null;
    sources_some?: TrunkRecorderSourceWhereInput | null;
    sources_none?: TrunkRecorderSourceWhereInput | null;
    systems_every?: TrunkRecorderSystemWhereInput | null;
    systems_some?: TrunkRecorderSystemWhereInput | null;
    systems_none?: TrunkRecorderSystemWhereInput | null;
    defaultMode?: TrunkRecorderDefaultMode | null;
    defaultMode_not?: TrunkRecorderDefaultMode | null;
    defaultMode_in?: TrunkRecorderDefaultMode[] | null;
    defaultMode_not_in?: TrunkRecorderDefaultMode[] | null;
    captureDir?: string | null;
    captureDir_not?: string | null;
    captureDir_in?: string[] | null;
    captureDir_not_in?: string[] | null;
    captureDir_lt?: string | null;
    captureDir_lte?: string | null;
    captureDir_gt?: string | null;
    captureDir_gte?: string | null;
    captureDir_contains?: string | null;
    captureDir_not_contains?: string | null;
    captureDir_starts_with?: string | null;
    captureDir_not_starts_with?: string | null;
    captureDir_ends_with?: string | null;
    captureDir_not_ends_with?: string | null;
    callTimeout?: number | null;
    callTimeout_not?: number | null;
    callTimeout_in?: number[] | null;
    callTimeout_not_in?: number[] | null;
    callTimeout_lt?: number | null;
    callTimeout_lte?: number | null;
    callTimeout_gt?: number | null;
    callTimeout_gte?: number | null;
    logFile?: boolean | null;
    logFile_not?: boolean | null;
    frequencyFormat?: TrunkRecorderFrequencyFormat | null;
    frequencyFormat_not?: TrunkRecorderFrequencyFormat | null;
    frequencyFormat_in?: TrunkRecorderFrequencyFormat[] | null;
    frequencyFormat_not_in?: TrunkRecorderFrequencyFormat[] | null;
    controlWarnRate?: number | null;
    controlWarnRate_not?: number | null;
    controlWarnRate_in?: number[] | null;
    controlWarnRate_not_in?: number[] | null;
    controlWarnRate_lt?: number | null;
    controlWarnRate_lte?: number | null;
    controlWarnRate_gt?: number | null;
    controlWarnRate_gte?: number | null;
    statusAsString?: boolean | null;
    statusAsString_not?: boolean | null;
    AND?: TrunkRecorderConfigWhereInput[] | null;
    OR?: TrunkRecorderConfigWhereInput[] | null;
    NOT?: TrunkRecorderConfigWhereInput[] | null;
  }
  export interface TrunkRecorderSourceWhereInput {
    center?: number | null;
    center_not?: number | null;
    center_in?: number[] | null;
    center_not_in?: number[] | null;
    center_lt?: number | null;
    center_lte?: number | null;
    center_gt?: number | null;
    center_gte?: number | null;
    rate?: number | null;
    rate_not?: number | null;
    rate_in?: number[] | null;
    rate_not_in?: number[] | null;
    rate_lt?: number | null;
    rate_lte?: number | null;
    rate_gt?: number | null;
    rate_gte?: number | null;
    squelch?: number | null;
    squelch_not?: number | null;
    squelch_in?: number[] | null;
    squelch_not_in?: number[] | null;
    squelch_lt?: number | null;
    squelch_lte?: number | null;
    squelch_gt?: number | null;
    squelch_gte?: number | null;
    error?: number | null;
    error_not?: number | null;
    error_in?: number[] | null;
    error_not_in?: number[] | null;
    error_lt?: number | null;
    error_lte?: number | null;
    error_gt?: number | null;
    error_gte?: number | null;
    gain?: number | null;
    gain_not?: number | null;
    gain_in?: number[] | null;
    gain_not_in?: number[] | null;
    gain_lt?: number | null;
    gain_lte?: number | null;
    gain_gt?: number | null;
    gain_gte?: number | null;
    digitalRecorders?: number | null;
    digitalRecorders_not?: number | null;
    digitalRecorders_in?: number[] | null;
    digitalRecorders_not_in?: number[] | null;
    digitalRecorders_lt?: number | null;
    digitalRecorders_lte?: number | null;
    digitalRecorders_gt?: number | null;
    digitalRecorders_gte?: number | null;
    digitalLevels?: number | null;
    digitalLevels_not?: number | null;
    digitalLevels_in?: number[] | null;
    digitalLevels_not_in?: number[] | null;
    digitalLevels_lt?: number | null;
    digitalLevels_lte?: number | null;
    digitalLevels_gt?: number | null;
    digitalLevels_gte?: number | null;
    analogRecorders?: number | null;
    analogRecorders_not?: number | null;
    analogRecorders_in?: number[] | null;
    analogRecorders_not_in?: number[] | null;
    analogRecorders_lt?: number | null;
    analogRecorders_lte?: number | null;
    analogRecorders_gt?: number | null;
    analogRecorders_gte?: number | null;
    analogLevels?: number | null;
    analogLevels_not?: number | null;
    analogLevels_in?: number[] | null;
    analogLevels_not_in?: number[] | null;
    analogLevels_lt?: number | null;
    analogLevels_lte?: number | null;
    analogLevels_gt?: number | null;
    analogLevels_gte?: number | null;
    device?: string | null;
    device_not?: string | null;
    device_in?: string[] | null;
    device_not_in?: string[] | null;
    device_lt?: string | null;
    device_lte?: string | null;
    device_gt?: string | null;
    device_gte?: string | null;
    device_contains?: string | null;
    device_not_contains?: string | null;
    device_starts_with?: string | null;
    device_not_starts_with?: string | null;
    device_ends_with?: string | null;
    device_not_ends_with?: string | null;
    modulation?: TrunkedModulation | null;
    modulation_not?: TrunkedModulation | null;
    modulation_in?: TrunkedModulation[] | null;
    modulation_not_in?: TrunkedModulation[] | null;
    AND?: TrunkRecorderSourceWhereInput[] | null;
    OR?: TrunkRecorderSourceWhereInput[] | null;
    NOT?: TrunkRecorderSourceWhereInput[] | null;
  }
  export interface TrunkRecorderSystemWhereInput {
    type?: TrunkedSystemType | null;
    type_not?: TrunkedSystemType | null;
    type_in?: TrunkedSystemType[] | null;
    type_not_in?: TrunkedSystemType[] | null;
    talkgroupsFile?: string | null;
    talkgroupsFile_not?: string | null;
    talkgroupsFile_in?: string[] | null;
    talkgroupsFile_not_in?: string[] | null;
    talkgroupsFile_lt?: string | null;
    talkgroupsFile_lte?: string | null;
    talkgroupsFile_gt?: string | null;
    talkgroupsFile_gte?: string | null;
    talkgroupsFile_contains?: string | null;
    talkgroupsFile_not_contains?: string | null;
    talkgroupsFile_starts_with?: string | null;
    talkgroupsFile_not_starts_with?: string | null;
    talkgroupsFile_ends_with?: string | null;
    talkgroupsFile_not_ends_with?: string | null;
    recordUnknown?: boolean | null;
    recordUnknown_not?: boolean | null;
    shortName?: string | null;
    shortName_not?: string | null;
    shortName_in?: string[] | null;
    shortName_not_in?: string[] | null;
    shortName_lt?: string | null;
    shortName_lte?: string | null;
    shortName_gt?: string | null;
    shortName_gte?: string | null;
    shortName_contains?: string | null;
    shortName_not_contains?: string | null;
    shortName_starts_with?: string | null;
    shortName_not_starts_with?: string | null;
    shortName_ends_with?: string | null;
    shortName_not_ends_with?: string | null;
    uploadScript?: string | null;
    uploadScript_not?: string | null;
    uploadScript_in?: string[] | null;
    uploadScript_not_in?: string[] | null;
    uploadScript_lt?: string | null;
    uploadScript_lte?: string | null;
    uploadScript_gt?: string | null;
    uploadScript_gte?: string | null;
    uploadScript_contains?: string | null;
    uploadScript_not_contains?: string | null;
    uploadScript_starts_with?: string | null;
    uploadScript_not_starts_with?: string | null;
    uploadScript_ends_with?: string | null;
    uploadScript_not_ends_with?: string | null;
    audioArchive?: boolean | null;
    audioArchive_not?: boolean | null;
    callLog?: boolean | null;
    callLog_not?: boolean | null;
    bandplan?: SmartnetBandplan | null;
    bandplan_not?: SmartnetBandplan | null;
    bandplan_in?: SmartnetBandplan[] | null;
    bandplan_not_in?: SmartnetBandplan[] | null;
    bandplanBase?: number | null;
    bandplanBase_not?: number | null;
    bandplanBase_in?: number[] | null;
    bandplanBase_not_in?: number[] | null;
    bandplanBase_lt?: number | null;
    bandplanBase_lte?: number | null;
    bandplanBase_gt?: number | null;
    bandplanBase_gte?: number | null;
    bandplanHigh?: number | null;
    bandplanHigh_not?: number | null;
    bandplanHigh_in?: number[] | null;
    bandplanHigh_not_in?: number[] | null;
    bandplanHigh_lt?: number | null;
    bandplanHigh_lte?: number | null;
    bandplanHigh_gt?: number | null;
    bandplanHigh_gte?: number | null;
    bandplanSpacing?: number | null;
    bandplanSpacing_not?: number | null;
    bandplanSpacing_in?: number[] | null;
    bandplanSpacing_not_in?: number[] | null;
    bandplanSpacing_lt?: number | null;
    bandplanSpacing_lte?: number | null;
    bandplanSpacing_gt?: number | null;
    bandplanSpacing_gte?: number | null;
    bandplanOffset?: number | null;
    bandplanOffset_not?: number | null;
    bandplanOffset_in?: number[] | null;
    bandplanOffset_not_in?: number[] | null;
    bandplanOffset_lt?: number | null;
    bandplanOffset_lte?: number | null;
    bandplanOffset_gt?: number | null;
    bandplanOffset_gte?: number | null;
    talkgroupDisplayFormat?: TalkgroupDisplayFormat | null;
    talkgroupDisplayFormat_not?: TalkgroupDisplayFormat | null;
    talkgroupDisplayFormat_in?: TalkgroupDisplayFormat[] | null;
    talkgroupDisplayFormat_not_in?: TalkgroupDisplayFormat[] | null;
    delayCreateOutput?: boolean | null;
    delayCreateOutput_not?: boolean | null;
    hideEncrypted?: boolean | null;
    hideEncrypted_not?: boolean | null;
    hideUnknownTalkgroups?: boolean | null;
    hideUnknownTalkgroups_not?: boolean | null;
    AND?: TrunkRecorderSystemWhereInput[] | null;
    OR?: TrunkRecorderSystemWhereInput[] | null;
    NOT?: TrunkRecorderSystemWhereInput[] | null;
  }

  export interface ArgsTrunkRecorderConfig {
    where?: TrunkRecorderConfigSubscriptionWhereInput | null;
  }

  export interface ArgsTrunkRecorderSource {
    where?: TrunkRecorderSourceSubscriptionWhereInput | null;
  }

  export interface ArgsTrunkRecorderSystem {
    where?: TrunkRecorderSystemSubscriptionWhereInput | null;
  }

  export type TrunkRecorderConfigResolver = {
    subscribe: (
      parent: undefined,
      args: ArgsTrunkRecorderConfig,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | AsyncIterator<TrunkRecorderConfigSubscriptionPayload | null>
      | Promise<AsyncIterator<TrunkRecorderConfigSubscriptionPayload | null>>;
    resolve?: (
      parent: undefined,
      args: ArgsTrunkRecorderConfig,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | TrunkRecorderConfigSubscriptionPayload
      | null
      | Promise<TrunkRecorderConfigSubscriptionPayload | null>;
  };

  export type TrunkRecorderSourceResolver = {
    subscribe: (
      parent: undefined,
      args: ArgsTrunkRecorderSource,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | AsyncIterator<TrunkRecorderSourceSubscriptionPayload | null>
      | Promise<AsyncIterator<TrunkRecorderSourceSubscriptionPayload | null>>;
    resolve?: (
      parent: undefined,
      args: ArgsTrunkRecorderSource,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | TrunkRecorderSourceSubscriptionPayload
      | null
      | Promise<TrunkRecorderSourceSubscriptionPayload | null>;
  };

  export type TrunkRecorderSystemResolver = {
    subscribe: (
      parent: undefined,
      args: ArgsTrunkRecorderSystem,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | AsyncIterator<TrunkRecorderSystemSubscriptionPayload | null>
      | Promise<AsyncIterator<TrunkRecorderSystemSubscriptionPayload | null>>;
    resolve?: (
      parent: undefined,
      args: ArgsTrunkRecorderSystem,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | TrunkRecorderSystemSubscriptionPayload
      | null
      | Promise<TrunkRecorderSystemSubscriptionPayload | null>;
  };

  export interface Type {
    trunkRecorderConfig: {
      subscribe: (
        parent: undefined,
        args: ArgsTrunkRecorderConfig,
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | AsyncIterator<TrunkRecorderConfigSubscriptionPayload | null>
        | Promise<AsyncIterator<TrunkRecorderConfigSubscriptionPayload | null>>;
      resolve?: (
        parent: undefined,
        args: ArgsTrunkRecorderConfig,
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | TrunkRecorderConfigSubscriptionPayload
        | null
        | Promise<TrunkRecorderConfigSubscriptionPayload | null>;
    };

    trunkRecorderSource: {
      subscribe: (
        parent: undefined,
        args: ArgsTrunkRecorderSource,
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | AsyncIterator<TrunkRecorderSourceSubscriptionPayload | null>
        | Promise<AsyncIterator<TrunkRecorderSourceSubscriptionPayload | null>>;
      resolve?: (
        parent: undefined,
        args: ArgsTrunkRecorderSource,
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | TrunkRecorderSourceSubscriptionPayload
        | null
        | Promise<TrunkRecorderSourceSubscriptionPayload | null>;
    };

    trunkRecorderSystem: {
      subscribe: (
        parent: undefined,
        args: ArgsTrunkRecorderSystem,
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | AsyncIterator<TrunkRecorderSystemSubscriptionPayload | null>
        | Promise<AsyncIterator<TrunkRecorderSystemSubscriptionPayload | null>>;
      resolve?: (
        parent: undefined,
        args: ArgsTrunkRecorderSystem,
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | TrunkRecorderSystemSubscriptionPayload
        | null
        | Promise<TrunkRecorderSystemSubscriptionPayload | null>;
    };
  }
}

export namespace TrunkRecorderConfigSubscriptionPayloadResolvers {
  export const defaultResolvers = {
    mutation: (parent: TrunkRecorderConfigSubscriptionPayload) =>
      parent.mutation,
    node: (parent: TrunkRecorderConfigSubscriptionPayload) => parent.node,
    updatedFields: (parent: TrunkRecorderConfigSubscriptionPayload) =>
      parent.updatedFields,
    previousValues: (parent: TrunkRecorderConfigSubscriptionPayload) =>
      parent.previousValues
  };

  export type MutationResolver = (
    parent: TrunkRecorderConfigSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => MutationType | Promise<MutationType>;

  export type NodeResolver = (
    parent: TrunkRecorderConfigSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TrunkRecorderConfig | null | Promise<TrunkRecorderConfig | null>;

  export type UpdatedFieldsResolver = (
    parent: TrunkRecorderConfigSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string[] | null | Promise<string[] | null>;

  export type PreviousValuesResolver = (
    parent: TrunkRecorderConfigSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) =>
    | TrunkRecorderConfigPreviousValues
    | null
    | Promise<TrunkRecorderConfigPreviousValues | null>;

  export interface Type {
    mutation: (
      parent: TrunkRecorderConfigSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => MutationType | Promise<MutationType>;

    node: (
      parent: TrunkRecorderConfigSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TrunkRecorderConfig | null | Promise<TrunkRecorderConfig | null>;

    updatedFields: (
      parent: TrunkRecorderConfigSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string[] | null | Promise<string[] | null>;

    previousValues: (
      parent: TrunkRecorderConfigSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | TrunkRecorderConfigPreviousValues
      | null
      | Promise<TrunkRecorderConfigPreviousValues | null>;
  }
}

export namespace TrunkRecorderConfigPreviousValuesResolvers {
  export const defaultResolvers = {
    defaultMode: (parent: TrunkRecorderConfigPreviousValues) =>
      parent.defaultMode,
    captureDir: (parent: TrunkRecorderConfigPreviousValues) =>
      parent.captureDir,
    callTimeout: (parent: TrunkRecorderConfigPreviousValues) =>
      parent.callTimeout,
    logFile: (parent: TrunkRecorderConfigPreviousValues) => parent.logFile,
    frequencyFormat: (parent: TrunkRecorderConfigPreviousValues) =>
      parent.frequencyFormat,
    controlWarnRate: (parent: TrunkRecorderConfigPreviousValues) =>
      parent.controlWarnRate,
    statusAsString: (parent: TrunkRecorderConfigPreviousValues) =>
      parent.statusAsString
  };

  export type DefaultModeResolver = (
    parent: TrunkRecorderConfigPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TrunkRecorderDefaultMode | Promise<TrunkRecorderDefaultMode>;

  export type CaptureDirResolver = (
    parent: TrunkRecorderConfigPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CallTimeoutResolver = (
    parent: TrunkRecorderConfigPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type LogFileResolver = (
    parent: TrunkRecorderConfigPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type FrequencyFormatResolver = (
    parent: TrunkRecorderConfigPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TrunkRecorderFrequencyFormat | Promise<TrunkRecorderFrequencyFormat>;

  export type ControlWarnRateResolver = (
    parent: TrunkRecorderConfigPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type StatusAsStringResolver = (
    parent: TrunkRecorderConfigPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export interface Type {
    defaultMode: (
      parent: TrunkRecorderConfigPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TrunkRecorderDefaultMode | Promise<TrunkRecorderDefaultMode>;

    captureDir: (
      parent: TrunkRecorderConfigPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    callTimeout: (
      parent: TrunkRecorderConfigPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    logFile: (
      parent: TrunkRecorderConfigPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    frequencyFormat: (
      parent: TrunkRecorderConfigPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TrunkRecorderFrequencyFormat | Promise<TrunkRecorderFrequencyFormat>;

    controlWarnRate: (
      parent: TrunkRecorderConfigPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    statusAsString: (
      parent: TrunkRecorderConfigPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
  }
}

export namespace TrunkRecorderSourceSubscriptionPayloadResolvers {
  export const defaultResolvers = {
    mutation: (parent: TrunkRecorderSourceSubscriptionPayload) =>
      parent.mutation,
    node: (parent: TrunkRecorderSourceSubscriptionPayload) => parent.node,
    updatedFields: (parent: TrunkRecorderSourceSubscriptionPayload) =>
      parent.updatedFields,
    previousValues: (parent: TrunkRecorderSourceSubscriptionPayload) =>
      parent.previousValues
  };

  export type MutationResolver = (
    parent: TrunkRecorderSourceSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => MutationType | Promise<MutationType>;

  export type NodeResolver = (
    parent: TrunkRecorderSourceSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TrunkRecorderSource | null | Promise<TrunkRecorderSource | null>;

  export type UpdatedFieldsResolver = (
    parent: TrunkRecorderSourceSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string[] | null | Promise<string[] | null>;

  export type PreviousValuesResolver = (
    parent: TrunkRecorderSourceSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) =>
    | TrunkRecorderSourcePreviousValues
    | null
    | Promise<TrunkRecorderSourcePreviousValues | null>;

  export interface Type {
    mutation: (
      parent: TrunkRecorderSourceSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => MutationType | Promise<MutationType>;

    node: (
      parent: TrunkRecorderSourceSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TrunkRecorderSource | null | Promise<TrunkRecorderSource | null>;

    updatedFields: (
      parent: TrunkRecorderSourceSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string[] | null | Promise<string[] | null>;

    previousValues: (
      parent: TrunkRecorderSourceSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | TrunkRecorderSourcePreviousValues
      | null
      | Promise<TrunkRecorderSourcePreviousValues | null>;
  }
}

export namespace TrunkRecorderSourcePreviousValuesResolvers {
  export const defaultResolvers = {
    center: (parent: TrunkRecorderSourcePreviousValues) => parent.center,
    rate: (parent: TrunkRecorderSourcePreviousValues) => parent.rate,
    squelch: (parent: TrunkRecorderSourcePreviousValues) => parent.squelch,
    error: (parent: TrunkRecorderSourcePreviousValues) => parent.error,
    gain: (parent: TrunkRecorderSourcePreviousValues) => parent.gain,
    digitalRecorders: (parent: TrunkRecorderSourcePreviousValues) =>
      parent.digitalRecorders,
    digitalLevels: (parent: TrunkRecorderSourcePreviousValues) =>
      parent.digitalLevels === undefined ? null : parent.digitalLevels,
    analogRecorders: (parent: TrunkRecorderSourcePreviousValues) =>
      parent.analogRecorders,
    analogLevels: (parent: TrunkRecorderSourcePreviousValues) =>
      parent.analogLevels === undefined ? null : parent.analogLevels,
    device: (parent: TrunkRecorderSourcePreviousValues) => parent.device,
    modulation: (parent: TrunkRecorderSourcePreviousValues) => parent.modulation
  };

  export type CenterResolver = (
    parent: TrunkRecorderSourcePreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type RateResolver = (
    parent: TrunkRecorderSourcePreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type SquelchResolver = (
    parent: TrunkRecorderSourcePreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type ErrorResolver = (
    parent: TrunkRecorderSourcePreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type GainResolver = (
    parent: TrunkRecorderSourcePreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type DigitalRecordersResolver = (
    parent: TrunkRecorderSourcePreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type DigitalLevelsResolver = (
    parent: TrunkRecorderSourcePreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type AnalogRecordersResolver = (
    parent: TrunkRecorderSourcePreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type AnalogLevelsResolver = (
    parent: TrunkRecorderSourcePreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type DeviceResolver = (
    parent: TrunkRecorderSourcePreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ModulationResolver = (
    parent: TrunkRecorderSourcePreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TrunkedModulation | Promise<TrunkedModulation>;

  export interface Type {
    center: (
      parent: TrunkRecorderSourcePreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    rate: (
      parent: TrunkRecorderSourcePreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    squelch: (
      parent: TrunkRecorderSourcePreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    error: (
      parent: TrunkRecorderSourcePreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    gain: (
      parent: TrunkRecorderSourcePreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    digitalRecorders: (
      parent: TrunkRecorderSourcePreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    digitalLevels: (
      parent: TrunkRecorderSourcePreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    analogRecorders: (
      parent: TrunkRecorderSourcePreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    analogLevels: (
      parent: TrunkRecorderSourcePreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    device: (
      parent: TrunkRecorderSourcePreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    modulation: (
      parent: TrunkRecorderSourcePreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TrunkedModulation | Promise<TrunkedModulation>;
  }
}

export namespace TrunkRecorderSystemSubscriptionPayloadResolvers {
  export const defaultResolvers = {
    mutation: (parent: TrunkRecorderSystemSubscriptionPayload) =>
      parent.mutation,
    node: (parent: TrunkRecorderSystemSubscriptionPayload) => parent.node,
    updatedFields: (parent: TrunkRecorderSystemSubscriptionPayload) =>
      parent.updatedFields,
    previousValues: (parent: TrunkRecorderSystemSubscriptionPayload) =>
      parent.previousValues
  };

  export type MutationResolver = (
    parent: TrunkRecorderSystemSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => MutationType | Promise<MutationType>;

  export type NodeResolver = (
    parent: TrunkRecorderSystemSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TrunkRecorderSystem | null | Promise<TrunkRecorderSystem | null>;

  export type UpdatedFieldsResolver = (
    parent: TrunkRecorderSystemSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string[] | null | Promise<string[] | null>;

  export type PreviousValuesResolver = (
    parent: TrunkRecorderSystemSubscriptionPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) =>
    | TrunkRecorderSystemPreviousValues
    | null
    | Promise<TrunkRecorderSystemPreviousValues | null>;

  export interface Type {
    mutation: (
      parent: TrunkRecorderSystemSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => MutationType | Promise<MutationType>;

    node: (
      parent: TrunkRecorderSystemSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TrunkRecorderSystem | null | Promise<TrunkRecorderSystem | null>;

    updatedFields: (
      parent: TrunkRecorderSystemSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string[] | null | Promise<string[] | null>;

    previousValues: (
      parent: TrunkRecorderSystemSubscriptionPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | TrunkRecorderSystemPreviousValues
      | null
      | Promise<TrunkRecorderSystemPreviousValues | null>;
  }
}

export namespace TrunkRecorderSystemPreviousValuesResolvers {
  export const defaultResolvers = {
    control_channels: (parent: TrunkRecorderSystemPreviousValues) =>
      parent.control_channels,
    channels: (parent: TrunkRecorderSystemPreviousValues) => parent.channels,
    alphatags: (parent: TrunkRecorderSystemPreviousValues) => parent.alphatags,
    type: (parent: TrunkRecorderSystemPreviousValues) => parent.type,
    talkgroupsFile: (parent: TrunkRecorderSystemPreviousValues) =>
      parent.talkgroupsFile === undefined ? null : parent.talkgroupsFile,
    recordUnknown: (parent: TrunkRecorderSystemPreviousValues) =>
      parent.recordUnknown === undefined ? null : parent.recordUnknown,
    shortName: (parent: TrunkRecorderSystemPreviousValues) => parent.shortName,
    uploadScript: (parent: TrunkRecorderSystemPreviousValues) =>
      parent.uploadScript,
    audioArchive: (parent: TrunkRecorderSystemPreviousValues) =>
      parent.audioArchive,
    callLog: (parent: TrunkRecorderSystemPreviousValues) => parent.callLog,
    bandplan: (parent: TrunkRecorderSystemPreviousValues) => parent.bandplan,
    bandplanBase: (parent: TrunkRecorderSystemPreviousValues) =>
      parent.bandplanBase === undefined ? null : parent.bandplanBase,
    bandplanHigh: (parent: TrunkRecorderSystemPreviousValues) =>
      parent.bandplanHigh === undefined ? null : parent.bandplanHigh,
    bandplanSpacing: (parent: TrunkRecorderSystemPreviousValues) =>
      parent.bandplanSpacing === undefined ? null : parent.bandplanSpacing,
    bandplanOffset: (parent: TrunkRecorderSystemPreviousValues) =>
      parent.bandplanOffset === undefined ? null : parent.bandplanOffset,
    talkgroupDisplayFormat: (parent: TrunkRecorderSystemPreviousValues) =>
      parent.talkgroupDisplayFormat === undefined
        ? null
        : parent.talkgroupDisplayFormat,
    delayCreateOutput: (parent: TrunkRecorderSystemPreviousValues) =>
      parent.delayCreateOutput === undefined ? null : parent.delayCreateOutput,
    hideEncrypted: (parent: TrunkRecorderSystemPreviousValues) =>
      parent.hideEncrypted,
    hideUnknownTalkgroups: (parent: TrunkRecorderSystemPreviousValues) =>
      parent.hideUnknownTalkgroups
  };

  export type Control_channelsResolver = (
    parent: TrunkRecorderSystemPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number[] | Promise<number[]>;

  export type ChannelsResolver = (
    parent: TrunkRecorderSystemPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number[] | Promise<number[]>;

  export type AlphatagsResolver = (
    parent: TrunkRecorderSystemPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string[] | Promise<string[]>;

  export type TypeResolver = (
    parent: TrunkRecorderSystemPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TrunkedSystemType | Promise<TrunkedSystemType>;

  export type TalkgroupsFileResolver = (
    parent: TrunkRecorderSystemPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type RecordUnknownResolver = (
    parent: TrunkRecorderSystemPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export type ShortNameResolver = (
    parent: TrunkRecorderSystemPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UploadScriptResolver = (
    parent: TrunkRecorderSystemPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type AudioArchiveResolver = (
    parent: TrunkRecorderSystemPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type CallLogResolver = (
    parent: TrunkRecorderSystemPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type BandplanResolver = (
    parent: TrunkRecorderSystemPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => SmartnetBandplan | Promise<SmartnetBandplan>;

  export type BandplanBaseResolver = (
    parent: TrunkRecorderSystemPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type BandplanHighResolver = (
    parent: TrunkRecorderSystemPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type BandplanSpacingResolver = (
    parent: TrunkRecorderSystemPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type BandplanOffsetResolver = (
    parent: TrunkRecorderSystemPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type TalkgroupDisplayFormatResolver = (
    parent: TrunkRecorderSystemPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TalkgroupDisplayFormat | null | Promise<TalkgroupDisplayFormat | null>;

  export type DelayCreateOutputResolver = (
    parent: TrunkRecorderSystemPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | null | Promise<boolean | null>;

  export type HideEncryptedResolver = (
    parent: TrunkRecorderSystemPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type HideUnknownTalkgroupsResolver = (
    parent: TrunkRecorderSystemPreviousValues,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export interface Type {
    control_channels: (
      parent: TrunkRecorderSystemPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number[] | Promise<number[]>;

    channels: (
      parent: TrunkRecorderSystemPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number[] | Promise<number[]>;

    alphatags: (
      parent: TrunkRecorderSystemPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string[] | Promise<string[]>;

    type: (
      parent: TrunkRecorderSystemPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TrunkedSystemType | Promise<TrunkedSystemType>;

    talkgroupsFile: (
      parent: TrunkRecorderSystemPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    recordUnknown: (
      parent: TrunkRecorderSystemPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;

    shortName: (
      parent: TrunkRecorderSystemPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    uploadScript: (
      parent: TrunkRecorderSystemPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    audioArchive: (
      parent: TrunkRecorderSystemPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    callLog: (
      parent: TrunkRecorderSystemPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    bandplan: (
      parent: TrunkRecorderSystemPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => SmartnetBandplan | Promise<SmartnetBandplan>;

    bandplanBase: (
      parent: TrunkRecorderSystemPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    bandplanHigh: (
      parent: TrunkRecorderSystemPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    bandplanSpacing: (
      parent: TrunkRecorderSystemPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    bandplanOffset: (
      parent: TrunkRecorderSystemPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    talkgroupDisplayFormat: (
      parent: TrunkRecorderSystemPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TalkgroupDisplayFormat | null | Promise<TalkgroupDisplayFormat | null>;

    delayCreateOutput: (
      parent: TrunkRecorderSystemPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | null | Promise<boolean | null>;

    hideEncrypted: (
      parent: TrunkRecorderSystemPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    hideUnknownTalkgroups: (
      parent: TrunkRecorderSystemPreviousValues,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  TrunkRecorderConfig: TrunkRecorderConfigResolvers.Type;
  TrunkRecorderSource: TrunkRecorderSourceResolvers.Type;
  TrunkRecorderSystem: TrunkRecorderSystemResolvers.Type;
  TrunkRecorderConfigConnection: TrunkRecorderConfigConnectionResolvers.Type;
  PageInfo: PageInfoResolvers.Type;
  TrunkRecorderConfigEdge: TrunkRecorderConfigEdgeResolvers.Type;
  AggregateTrunkRecorderConfig: AggregateTrunkRecorderConfigResolvers.Type;
  TrunkRecorderSourceConnection: TrunkRecorderSourceConnectionResolvers.Type;
  TrunkRecorderSourceEdge: TrunkRecorderSourceEdgeResolvers.Type;
  AggregateTrunkRecorderSource: AggregateTrunkRecorderSourceResolvers.Type;
  TrunkRecorderSystemConnection: TrunkRecorderSystemConnectionResolvers.Type;
  TrunkRecorderSystemEdge: TrunkRecorderSystemEdgeResolvers.Type;
  AggregateTrunkRecorderSystem: AggregateTrunkRecorderSystemResolvers.Type;
  Mutation: MutationResolvers.Type;
  BatchPayload: BatchPayloadResolvers.Type;
  Subscription: SubscriptionResolvers.Type;
  TrunkRecorderConfigSubscriptionPayload: TrunkRecorderConfigSubscriptionPayloadResolvers.Type;
  TrunkRecorderConfigPreviousValues: TrunkRecorderConfigPreviousValuesResolvers.Type;
  TrunkRecorderSourceSubscriptionPayload: TrunkRecorderSourceSubscriptionPayloadResolvers.Type;
  TrunkRecorderSourcePreviousValues: TrunkRecorderSourcePreviousValuesResolvers.Type;
  TrunkRecorderSystemSubscriptionPayload: TrunkRecorderSystemSubscriptionPayloadResolvers.Type;
  TrunkRecorderSystemPreviousValues: TrunkRecorderSystemPreviousValuesResolvers.Type;
}
