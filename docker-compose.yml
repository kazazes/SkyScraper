version: "2.1"
volumes:
  resin-data: {}
  prometheus_data: {}
  grafana_data: {}
services:
  # postgres:
  #   build:
  #     context: ./host-images/postgres
  #   volumes:
  #     - "resin-data:/data"
  #   restart: always
  #   network_mode: host
  #   environment:
  #     POSTGRES_USER: skyscraper
  #     POSTGRES_PASSWORD: sdr
  #     PGDATA: /data/postgres
  #     POSTGRES_DB: radio
  # prisma:
  #   image: prismagraphql/prisma
  #   restart: always
  #   ports:
  #     - "4466:4466"
  #   environment:
  #     PRISMA_CONFIG: |
  #       managementApiSecret: scrapingskies
  #       port: 4466
  #       databases:
  #         default:
  #           connector: postgres
  #           migrations: true
  #           host: postgres
  #           port: 5432
  #           user: skyscraper
  #           password: sdr
  # prometheus:
  #   build:
  #     context: ./host-images/prometheus
  #   privileged: true
  #   pid: host
  #   cpuset: 3
  #   restart: always
  #   ports:
  #     - 8080:8080
  manager:
    build:
      context: ./host-images/manager
    privileged: true
    pid: host
    cpuset: 3
    restart: always
    environment:
      - "NODE_ENV=production"
    volumes:
      - "resin-data:/data"
    ports:
      - 3000:3000
  trunk-recorder:
    cpu_shares: 820
    cpu_quota: 300000
    build:
      context: ./host-images/trunk-recorder
    privileged: true
    cpuset: 0-3
    restart: unless-stopped
    depends_on:
      - "config"
    network_mode: host
    mem_swappiness: 10
    cap_add:
      - SYS_RAWIO
    volumes:
      - "resin-data:/data"
  config:
    build:
      context: ./host-images/config
    network_mode: host
    cpuset: 3
    restart: "on-failure"
    volumes:
      - "resin-data:/data"
  # mqtt:
  #   image: panuwitp/mosquitto-arm
  #   ports:
  #     - "1883:1883"
  # node-red:
  #   build:
  #     context: ./host-images/node-red
  #   volumes:
  #     - "resin-data:/data"
  #   ports:
  #     - "1880:1880"
  #   depends_on:
  #     - mqtt
  #   restart: always
  nginx:
    build:
      context: ./host-images/nginx
    privileged: true
    cpuset: 3
    depends_on:
      - manager
      - prometheus
    ports:
      - "80:80"
      - "443:443"
    restart: always
  debugger:
    build:
      context: ./host-images/debugger
    command: "exit 0"
    restart: "no"
    privileged: true
    volumes:
      - "resin-data:/data"

  prometheus:
    image: alexellis2/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention=200h"
      - "--web.enable-lifecycle"
    restart: unless-stopped
    expose:
      - 9090
    labels:
      org.label-schema.group: "monitoring"

  alertmanager:
    cap_add:
      - SYS_RAWIO
    image: linaro/debian-source-prometheus-alertmanager
    container_name: alertmanager
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    command:
      - "--config.file=/etc/alertmanager/config.yml"
      - "--storage.path=/alertmanager"
    restart: unless-stopped
    expose:
      - 9093
    labels:
      org.label-schema.group: "monitoring"

  nodeexporter:
    image: linaro/debian-source-prometheus-node-exporter
    cap_add:
      - SYS_RAWIO
    container_name: nodeexporter
    user: root
    privileged: true
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)"
    restart: unless-stopped
    expose:
      - 9100
    labels:
      org.label-schema.group: "monitoring"

  cadvisor:
    image: linuxkit/cadvisor
    cap_add:
      - SYS_RAWIO
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    restart: unless-stopped
    expose:
      - 8080
    labels:
      org.label-schema.group: "monitoring"

  grafana:
    image: raymondmm/grafana
    container_name: grafana
    cap_add:
      - SYS_RAWIO
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/datasources:/etc/grafana/datasources
      - ./grafana/dashboards:/etc/grafana/dashboards
      - ./grafana/setup.sh:/setup.sh
    entrypoint: /setup.sh
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    expose:
      - 3000
    labels:
      org.label-schema.group: "monitoring"
